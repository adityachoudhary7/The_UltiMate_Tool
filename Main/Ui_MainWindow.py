# Form implementation generated from reading ui file '1bk5.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt6.QtCore import QTimer,QObject
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import Qt,QPoint,QEvent
import random
import ctypes
from PyQt6.QtCore import pyqtSignal, pyqtSlot
from PyQt6.QtGui import QKeyEvent
import time , sys, os
from PyQt6.QtWidgets import QApplication, QWidget, QComboBox, QPushButton, QMessageBox, QMainWindow
from PyQt6.QtGui import QIntValidator,QDoubleValidator,QFont,QEventPoint,QPixmap



##manual icon

#from PyQt6.QtWidgets import QMessageBox
#from PyQt6.QtGui import QIcon

import openpyxl
import os
import sys
def resource_path(relative):
    return os.path.join(
        os.environ.get(
            "_MEIPASS2",
            os.path.abspath(".")
        ),
        relative
    )
    return os.path.join(base_path, relative_path)


class Ui_MainWindow(QtWidgets.QMainWindow):
    

    def setupUi(self, MainWindow):
        super().__init__()
        MainWindow.setObjectName("MainWindow")
        
        MainWindow.setWindowModality(QtCore.Qt.WindowModality.NonModal)
        MainWindow.resize(995, 620)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(826, 620))
        MainWindow.setMaximumSize(QtCore.QSize(1400, 620))
        MainWindow.setAcceptDrops(True)
        MainWindow.setWindowIcon(QtGui.QIcon(resource_path("icons/main logo.png")))
        MainWindow.setStyleSheet("background-color: rgb(31, 31, 42);\n"
"border-radius:0px;") #

        MainWindow.setIconSize(QtCore.QSize(24, 24))
        MainWindow.setTabShape(QtWidgets.QTabWidget.TabShape.Rounded)
        self.centralwidget = QWidget()
        ##############
        import ctypes
        myappid = 'mycompany.myproduct.subproduct.version' # arbitrary string
        ctypes.windll.shell32.SetCurrentProcessExplicitAppUserModelID(myappid)

        

        #self.centralwidget.setWindowFlags(Qt.WindowType.FramelessWindowHint)
        #self.centralwidget.setStyleSheet("background-color: transparent;") 
        #self.centralwidget.setAttribute(Qt.ApplicationAttribute.)
        self.centralwidget.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setMinimumSize(QtCore.QSize(900, 460))
        self.centralwidget.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.centralwidget.setStyleSheet("background-color: rgb(0, 2, 33);")
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_14 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_14.setSizeConstraint(QtWidgets.QLayout.SizeConstraint.SetMinAndMaxSize)
        self.gridLayout_14.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_14.setObjectName("gridLayout_14")
        self.mainmenu = QtWidgets.QWidget(parent=self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(173)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.mainmenu.sizePolicy().hasHeightForWidth())
        self.mainmenu.setSizePolicy(sizePolicy)
        self.mainmenu.setStyleSheet("background-color: rgb(0, 2, 33);")
        self.mainmenu.setObjectName("mainmenu")
        self.gridLayout_9 = QtWidgets.QGridLayout(self.mainmenu)
        self.gridLayout_9.setObjectName("gridLayout_9")
        self.right_menu_frame = QtWidgets.QFrame(parent=self.mainmenu)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.right_menu_frame.sizePolicy().hasHeightForWidth())
        self.right_menu_frame.setSizePolicy(sizePolicy)
        self.right_menu_frame.setMinimumSize(QtCore.QSize(601, 600))
        self.right_menu_frame.setMaximumSize(QtCore.QSize(601, 600))
        self.right_menu_frame.setStyleSheet("border-radius:30px;\n"
"background-color: rgb(0, 0, 23);")
        self.right_menu_frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.right_menu_frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.right_menu_frame.setObjectName("right_menu_frame")
        self.gridLayout = QtWidgets.QGridLayout(self.right_menu_frame)
        self.gridLayout.setContentsMargins(-1, 0, -1, -1)
        self.gridLayout.setObjectName("gridLayout")
        self.topbar_frame = QtWidgets.QFrame(parent=self.right_menu_frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.topbar_frame.sizePolicy().hasHeightForWidth())
        self.topbar_frame.setSizePolicy(sizePolicy)
        self.topbar_frame.setMinimumSize(QtCore.QSize(601, 60))
        self.topbar_frame.setMaximumSize(QtCore.QSize(16777215, 60))
        self.topbar_frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.topbar_frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.topbar_frame.setObjectName("topbar_frame")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.topbar_frame)
        self.gridLayout_6.setContentsMargins(0, 0, 0, 9)
        self.gridLayout_6.setSpacing(0)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.topbar_window_frame = QtWidgets.QFrame(parent=self.topbar_frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.topbar_window_frame.sizePolicy().hasHeightForWidth())
        self.topbar_window_frame.setSizePolicy(sizePolicy)
        self.topbar_window_frame.setMinimumSize(QtCore.QSize(100, 50))
        self.topbar_window_frame.setMaximumSize(QtCore.QSize(100, 50))
        self.topbar_window_frame.setStyleSheet("background-color: rgb(0, 1, 26);\n"
"\n"
"border-radius:15px;")
        self.topbar_window_frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.topbar_window_frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.topbar_window_frame.setObjectName("topbar_window_frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.topbar_window_frame)
        self.gridLayout_2.setObjectName("gridLayout_2")
        spacerItem = QtWidgets.QSpacerItem(21, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_2.addItem(spacerItem, 0, 0, 1, 1)
        layout = QtWidgets.QHBoxLayout(self.centralwidget)
        #spacer = QtWidgets.QSpacerItem(110, 70, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        #layout.addItem(spacer)

        self.topbar_window_button_minimize = QtWidgets.QPushButton(parent=self.topbar_window_frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.topbar_window_button_minimize.sizePolicy().hasHeightForWidth())
        self.topbar_window_button_minimize.setSizePolicy(sizePolicy)
        self.topbar_window_button_minimize.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(resource_path("icons/winio/minimize.png")), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        # C:/Users/chad2001/Desktop/VBS/Python/APPLICATION/VSCODE/test1/icons/left//cmd.png
        # test1/icons/rename.png
        self.topbar_window_button_minimize.setIcon(icon)
        self.topbar_window_button_minimize.setIconSize(QtCore.QSize(30, 30))
        self.topbar_window_button_minimize.setObjectName("topbar_window_button_minimize")
        self.gridLayout_2.addWidget(self.topbar_window_button_minimize, 0, 1, 1, 1)
        self.topbar_window_button_close = QtWidgets.QPushButton(parent=self.topbar_window_frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.topbar_window_button_close.sizePolicy().hasHeightForWidth())
        self.topbar_window_button_close.setSizePolicy(sizePolicy)
        self.topbar_window_button_close.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(resource_path("icons/winio/close.png")), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.topbar_window_button_close.setIcon(icon1)
        self.topbar_window_button_close.setIconSize(QtCore.QSize(30, 30))
        self.topbar_window_button_close.setObjectName("topbar_window_button_close")
        self.gridLayout_2.addWidget(self.topbar_window_button_close, 0, 2, 1, 1)
        self.gridLayout_6.addWidget(self.topbar_window_frame, 0, 4, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(60, 25, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout_6.addItem(spacerItem1, 0, 1, 1, 1)
        self.topbar_button_toggle = QtWidgets.QPushButton(parent=self.topbar_frame)
        


        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.topbar_button_toggle.sizePolicy().hasHeightForWidth())
        self.topbar_button_toggle.setSizePolicy(sizePolicy)
        self.topbar_button_toggle.setStyleSheet("background-color: rgb(0, 2, 41);\n"
"border-radius:5px;")
        self.topbar_button_toggle.setText("")
        icon2 = QtGui.QIcon()
        #test1/icons/toggle
        icon2.addPixmap(QtGui.QPixmap(resource_path("icons/toggle/left.png")), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        icon2.addPixmap(QtGui.QPixmap(resource_path("icons/toggle/right.png")), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.On)
        self.topbar_button_toggle.setIcon(icon2)
        self.topbar_button_toggle.setIconSize(QtCore.QSize(50, 50))
        self.topbar_button_toggle.setCheckable(True)
        self.topbar_button_toggle.setObjectName("topbar_button_toggle")
        self.gridLayout_6.addWidget(self.topbar_button_toggle, 0, 0, 1, 1)
        #######
        icon_label = QtWidgets.QLabel(self.topbar_frame)
        icon_pixmap = QtGui.QPixmap(resource_path("icons/main logo.png"))
        icon_label.setPixmap(icon_pixmap)
        icon_label.setPixmap(icon_pixmap.scaled(50, 50, QtCore.Qt.AspectRatioMode.KeepAspectRatio, QtCore.Qt.TransformationMode.SmoothTransformation))
        icon_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(icon_label)
        self.gridLayout_6.addWidget(icon_label, 0, 1, 1, 1)

        #####
        self.topbar_label_ulti = QtWidgets.QLabel(parent=self.topbar_frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.topbar_label_ulti.sizePolicy().hasHeightForWidth())
        self.topbar_label_ulti.setSizePolicy(sizePolicy)
        self.topbar_label_ulti.setMinimumSize(QtCore.QSize(250, 31))
        self.topbar_label_ulti.setMaximumSize(QtCore.QSize(400, 100))
        self.topbar_label_ulti.setStyleSheet("color: rgb(255, 255, 255);")
        self.topbar_label_ulti.setObjectName("topbar_label_ulti")
        self.gridLayout_6.addWidget(self.topbar_label_ulti, 0, 2, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(81, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout_6.addItem(spacerItem2, 0, 3, 1, 1)
        self.topbar_window_frame.raise_()
        self.topbar_button_toggle.raise_()
        self.topbar_label_ulti.raise_()
        self.gridLayout.addWidget(self.topbar_frame, 0, 0, 1, 2)
        self.stackedWidget = QtWidgets.QStackedWidget(parent=self.right_menu_frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.stackedWidget.sizePolicy().hasHeightForWidth())
        self.stackedWidget.setSizePolicy(sizePolicy)
        self.stackedWidget.setMinimumSize(QtCore.QSize(592, 480))
        self.stackedWidget.setMaximumSize(QtCore.QSize(592, 480))
        font = QtGui.QFont()
        font.setPointSize(4)
        self.stackedWidget.setFont(font)
        self.stackedWidget.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.stackedWidget.setAcceptDrops(False)
        self.stackedWidget.setStyleSheet("background-color: rgb(19, 19, 30);\n"
"color: rgb(255, 255, 255);\n"
"\n"
"")
        self.stackedWidget.setInputMethodHints(QtCore.Qt.InputMethodHint.ImhNone)
        self.stackedWidget.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)
        self.stackedWidget.setObjectName("stackedWidget")
        self.stacked_wid_rename = QtWidgets.QWidget()
        self.stacked_wid_rename.setObjectName("stacked_wid_rename")
        self.stacked_tool_rename = QtWidgets.QToolBox(parent=self.stacked_wid_rename)
        self.stacked_tool_rename.setGeometry(QtCore.QRect(40, 80, 521, 381))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.stacked_tool_rename.sizePolicy().hasHeightForWidth())
        self.stacked_tool_rename.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(False)
        font.setUnderline(False)
        self.stacked_tool_rename.setFont(font)
        self.stacked_tool_rename.setObjectName("stacked_tool_rename")
        self.stacked_tool_rename_files = QtWidgets.QWidget()
        self.stacked_tool_rename_files.setGeometry(QtCore.QRect(0, 0, 521, 309))
        self.stacked_tool_rename_files.setObjectName("stacked_tool_rename_files")
        self.stacked_label_files_location = QtWidgets.QLabel(parent=self.stacked_tool_rename_files)
        self.stacked_label_files_location.setGeometry(QtCore.QRect(20, 20, 281, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.stacked_label_files_location.setFont(font)
        self.stacked_label_files_location.setObjectName("stacked_label_files_location")
        self.stacked_lineedit_files_location = QtWidgets.QLineEdit(parent=self.stacked_tool_rename_files)
        self.stacked_lineedit_files_location.setGeometry(QtCore.QRect(30, 70, 441, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.stacked_lineedit_files_location.setFont(font)
        self.stacked_lineedit_files_location.setStyleSheet("QLineEdit{background-color: rgb(255, 255, 255);\n"
"border-radius:10px;\n"
"color: rgb(0, 3, 57);\n"
"\n"
"\n"
"}\n"
"\n"
"QLineEdit:focus{background-color: rgb(255, 255, 255);\n"
"border-radius:10px;\n"
"border:2px solid #FBAD25;\n"
"color: rgb(0, 3, 57);\n"
"\n"
"\n"
"}")
        self.stacked_lineedit_files_location.setLocale(QtCore.QLocale(QtCore.QLocale.Language.English, QtCore.QLocale.Country.UnitedStates))
        self.stacked_lineedit_files_location.setInputMask("")
        self.stacked_lineedit_files_location.setText("")
        self.stacked_lineedit_files_location.setFrame(True)
        self.stacked_lineedit_files_location.setEchoMode(QtWidgets.QLineEdit.EchoMode.Normal)
        self.stacked_lineedit_files_location.setCursorPosition(0)
        self.stacked_lineedit_files_location.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.stacked_lineedit_files_location.setDragEnabled(False)
        self.stacked_lineedit_files_location.setReadOnly(False)
        self.stacked_lineedit_files_location.setCursorMoveStyle(QtCore.Qt.CursorMoveStyle.VisualMoveStyle)
        self.stacked_lineedit_files_location.setClearButtonEnabled(True)
        self.stacked_lineedit_files_location.setObjectName("stacked_lineedit_files_location")
        self.stacked_button_files_rename = QtWidgets.QPushButton(parent=self.stacked_tool_rename_files)
        self.stacked_button_files_rename.setGeometry(QtCore.QRect(180, 210, 151, 41))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.stacked_button_files_rename.sizePolicy().hasHeightForWidth())
        self.stacked_button_files_rename.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(16)
        self.stacked_button_files_rename.setFont(font)
        self.stacked_button_files_rename.setStyleSheet("QPushButton{background-color: rgb(9, 9, 19);\n"
"border :3px solid white;\n"
"border-radius:10px;\n"
"}\n"
"\n"
"\n"
"QPushButton:hover{\n"
"    background-color: rgb(100, 100, 100);\n"
"border-radius:10px;\n"
"}\n"
"\n"
"QPushButton:pressed{;\n"
";\n"
"    background-color: rgb(67, 67, 82);\n"
"border-radius:10px;\n"
"}")
        self.stacked_button_files_rename.setObjectName("stacked_button_files_rename")
#         self.stacked_lineedit_files_period = QtWidgets.QLineEdit(parent=self.stacked_tool_rename_files)
#         self.stacked_lineedit_files_period.setGeometry(QtCore.QRect(130, 90, 121, 31))
#         font = QtGui.QFont()
#         font.setPointSize(10)
#         self.stacked_lineedit_files_period.setFont(font)
#         self.stacked_lineedit_files_period.setStyleSheet("QLineEdit{background-color: rgb(255, 255, 255);\n"
# "border-radius:10px;\n"
# "color: rgb(0, 3, 57);\n"
# "\n"
# "\n"
# "}\n"
# "\n"
# "QLineEdit:focus{background-color: rgb(255, 255, 255);\n"
# "border-radius:10px;\n"
# "border:2px solid #FBAD25;\n"
# "color: rgb(0, 3, 57);\n"
# "\n"
# "\n"
# "}")
#         self.stacked_lineedit_files_period.setText("")
#         self.stacked_lineedit_files_period.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
#         self.stacked_lineedit_files_period.setDragEnabled(True)
#         self.stacked_lineedit_files_period.setClearButtonEnabled(True)
        #self.stacked_lineedit_files_period.setObjectName("stacked_lineedit_files_period")
        self.stacked_label_files_values = QtWidgets.QLabel(parent=self.stacked_tool_rename_files)
        self.stacked_label_files_values.setGeometry(QtCore.QRect(30, 130, 101, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.stacked_label_files_values.setFont(font)
        self.stacked_label_files_values.setObjectName("stacked_label_files_values")
        self.stacked_button_files_input = QtWidgets.QPushButton(parent=self.stacked_tool_rename_files)
        self.stacked_button_files_input.setGeometry(QtCore.QRect(130, 130, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.stacked_button_files_input.setFont(font)
        self.stacked_button_files_input.setStyleSheet("QPushButton{background-color: rgb(9, 9, 19);\n"
"border :1px solid white;\n"
"border-radius:10px;\n"
"}\n"
"\n"
"\n"
"QPushButton:hover{\n"
"    background-color: rgb(50, 50, 50);\n"
"border-radius:10px;\n"
"}\n"
"\n"
"QPushButton:pressed{;\n"
";\n"
"    background-color: rgb(100, 100, 100);\n"
"border-radius:10px;\n"
"}")
        self.stacked_button_files_input.setObjectName("stacked_button_files_input")
        # self.stacked_label_files_period = QtWidgets.QLabel(parent=self.stacked_tool_rename_files)
        # self.stacked_label_files_period.setGeometry(QtCore.QRect(20, 90, 101, 31))
        # font = QtGui.QFont()
        # font.setPointSize(16)
        # self.stacked_label_files_period.setFont(font)
        # self.stacked_label_files_period.setObjectName("stacked_label_files_period")
#         self.stacked_label_files_preview = QtWidgets.QLabel(parent=self.stacked_tool_rename_files)
#         self.stacked_label_files_preview.setGeometry(QtCore.QRect(30, 140, 71, 31))
#         font = QtGui.QFont()
#         font.setPointSize(16)
#         self.stacked_label_files_preview.setFont(font)
#         self.stacked_label_files_preview.setObjectName("stacked_label_files_preview")
#         self.stacked_table_files_preview = QtWidgets.QTableWidget(parent=self.stacked_tool_rename_files)
#         self.stacked_table_files_preview.setGeometry(QtCore.QRect(110, 130, 391, 101))
#         self.stacked_table_files_preview.setAutoFillBackground(False)
#         self.stacked_table_files_preview.setStyleSheet("QHeaderView::section { color:white; background-color:#0d0d11; }\n"
# "QTableCornerButton::section { background-color:#0d0d11; }\n"
# "QTableView::item:selected { color:white; background:#000000; font-weight:900; }\n"
# "\n"
# "\n"
# "\n"
# "\n"
# "")
#         self.stacked_table_files_preview.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)
#         self.stacked_table_files_preview.setObjectName("stacked_table_files_preview")
#         self.stacked_table_files_preview.setColumnCount(0)
#         self.stacked_table_files_preview.setRowCount(0)
        self.stacked_tool_rename.addItem(self.stacked_tool_rename_files, "")
        self.stacked_tool_rename_sheet = QtWidgets.QWidget()
        self.stacked_tool_rename_sheet.setGeometry(QtCore.QRect(0, 0, 521, 309))
        self.stacked_tool_rename_sheet.setObjectName("stacked_tool_rename_sheet")
        self.stacked_label_sheet_location = QtWidgets.QLabel(parent=self.stacked_tool_rename_sheet)
        self.stacked_label_sheet_location.setGeometry(QtCore.QRect(20, 60, 251, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.stacked_label_sheet_location.setFont(font)
        self.stacked_label_sheet_location.setObjectName("stacked_label_sheet_location")
        self.stacked_checkbox_sheet_toc = QtWidgets.QCheckBox(parent=self.stacked_tool_rename_sheet)
        self.stacked_checkbox_sheet_toc.setGeometry(QtCore.QRect(60, 150, 261, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.stacked_checkbox_sheet_toc.setFont(font)
        self.stacked_checkbox_sheet_toc.setIconSize(QtCore.QSize(25, 25))
        self.stacked_checkbox_sheet_toc.setChecked(True)
        self.stacked_checkbox_sheet_toc.setTristate(False)
        self.stacked_checkbox_sheet_toc.setObjectName("stacked_checkbox_sheet_toc")
        self.stacked_button_sheet_rename = QtWidgets.QPushButton(parent=self.stacked_tool_rename_sheet)
        self.stacked_button_sheet_rename.setGeometry(QtCore.QRect(160, 220, 171, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.stacked_button_sheet_rename.setFont(font)
        self.stacked_button_sheet_rename.setStyleSheet("QPushButton{background-color: rgb(9, 9, 19);\n"
"border :3px solid white;\n"
"border-radius:10px;\n"
"}\n"
"\n"
"\n"
"QPushButton:hover{\n"
"    background-color: rgb(100, 100, 100);\n"
"border-radius:10px;\n"
"}\n"
"\n"
"QPushButton:pressed{;\n"
";\n"
"    background-color: rgb(67, 67, 82);\n"
"border-radius:10px;\n"
"}")
        self.stacked_button_sheet_rename.setObjectName("stacked_button_sheet_rename")
        self.stacked_lineedit_sheet_location = QtWidgets.QLineEdit(parent=self.stacked_tool_rename_sheet)
        self.stacked_lineedit_sheet_location.setGeometry(QtCore.QRect(30, 110, 441, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.stacked_lineedit_sheet_location.sizePolicy().hasHeightForWidth())
        self.stacked_lineedit_sheet_location.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.stacked_lineedit_sheet_location.setFont(font)
        self.stacked_lineedit_sheet_location.setStyleSheet("QLineEdit{background-color: rgb(255, 255, 255);\n"
"border-radius:10px;\n"
"color: rgb(0, 3, 57);\n"
"\n"
"\n"
"}\n"
"\n"
"QLineEdit:focus{background-color: rgb(255, 255, 255);\n"
"border-radius:10px;\n"
"border:2px solid #FBAD25;\n"
"color: rgb(0, 3, 57);\n"
"\n"
"\n"
"}")
        self.stacked_lineedit_sheet_location.setText("")
        self.stacked_lineedit_sheet_location.setClearButtonEnabled(True)
        self.stacked_lineedit_sheet_location.setObjectName("stacked_lineedit_sheet_location")
        self.stacked_tool_rename.addItem(self.stacked_tool_rename_sheet, "")
        self.stacked_label_rename = QtWidgets.QLabel(parent=self.stacked_wid_rename)
        self.stacked_label_rename.setGeometry(QtCore.QRect(140, 30, 321, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.stacked_label_rename.sizePolicy().hasHeightForWidth())
        self.stacked_label_rename.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setKerning(True)
        self.stacked_label_rename.setFont(font)
        self.stacked_label_rename.setStyleSheet("color: rgb(255, 255, 255);")
        self.stacked_label_rename.setObjectName("stacked_label_rename")
        self.stackedWidget.addWidget(self.stacked_wid_rename)
        self.stacked_wid_cmd = QtWidgets.QWidget()
        self.stacked_wid_cmd.setObjectName("stacked_wid_cmd")
        self.stacked_label_cmd_main = QtWidgets.QLabel(parent=self.stacked_wid_cmd)
        self.stacked_label_cmd_main.setGeometry(QtCore.QRect(130, 30, 321, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.stacked_label_cmd_main.sizePolicy().hasHeightForWidth())
        self.stacked_label_cmd_main.setSizePolicy(sizePolicy)
        self.stacked_label_cmd_main.setStyleSheet("color: rgb(255, 255, 255);")
        self.stacked_label_cmd_main.setObjectName("stacked_label_cmd_main")
        self.stacked_lineedit_cmd_export = QtWidgets.QLineEdit(parent=self.stacked_wid_cmd)
        self.stacked_lineedit_cmd_export.setGeometry(QtCore.QRect(80, 280, 441, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.stacked_lineedit_cmd_export.setFont(font)
        self.stacked_lineedit_cmd_export.setStyleSheet("QLineEdit{background-color: rgb(255, 255, 255);\n"
"border-radius:10px;\n"
"color: rgb(0, 3, 57);\n"
"\n"
"\n"
"}\n"
"\n"
"QLineEdit:focus{background-color: rgb(255, 255, 255);\n"
"border-radius:10px;\n"
"border:2px solid #FBAD25;\n"
"color: rgb(0, 3, 57);\n"
"\n"
"\n"
"}")
        self.stacked_lineedit_cmd_export.setLocale(QtCore.QLocale(QtCore.QLocale.Language.English, QtCore.QLocale.Country.UnitedStates))
        self.stacked_lineedit_cmd_export.setInputMask("")
        self.stacked_lineedit_cmd_export.setText("")
        self.stacked_lineedit_cmd_export.setFrame(True)
        self.stacked_lineedit_cmd_export.setEchoMode(QtWidgets.QLineEdit.EchoMode.Normal)
        self.stacked_lineedit_cmd_export.setCursorPosition(0)
        self.stacked_lineedit_cmd_export.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.stacked_lineedit_cmd_export.setDragEnabled(False)
        self.stacked_lineedit_cmd_export.setReadOnly(False)
        self.stacked_lineedit_cmd_export.setCursorMoveStyle(QtCore.Qt.CursorMoveStyle.VisualMoveStyle)
        self.stacked_lineedit_cmd_export.setClearButtonEnabled(True)
        self.stacked_lineedit_cmd_export.setObjectName("stacked_lineedit_cmd_export")
        self.stacked_button_cmd_export = QtWidgets.QPushButton(parent=self.stacked_wid_cmd)
        self.stacked_button_cmd_export.setGeometry(QtCore.QRect(210, 340, 181, 51))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.stacked_button_cmd_export.sizePolicy().hasHeightForWidth())
        self.stacked_button_cmd_export.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(16)
        self.stacked_button_cmd_export.setFont(font)
        self.stacked_button_cmd_export.setStyleSheet("QPushButton{background-color: rgb(9, 9, 19);\n"
"border :3px solid white;\n"
"border-radius:10px;\n"
"}\n"
"\n"
"\n"
"QPushButton:hover{\n"
"    background-color: rgb(100, 100, 100);\n"
"border-radius:10px;\n"
"}\n"
"\n"
"QPushButton:pressed{;\n"
";\n"
"    background-color: rgb(67, 67, 82);\n"
"border-radius:10px;\n"
"}")
        self.stacked_button_cmd_export.setObjectName("stacked_button_cmd_export")
        self.stacked_label_cmd_export = QtWidgets.QLabel(parent=self.stacked_wid_cmd)
        self.stacked_label_cmd_export.setGeometry(QtCore.QRect(70, 210, 321, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.stacked_label_cmd_export.setFont(font)
        self.stacked_label_cmd_export.setObjectName("stacked_label_cmd_export")
        self.stacked_label_cmd_input = QtWidgets.QLabel(parent=self.stacked_wid_cmd)
        self.stacked_label_cmd_input.setGeometry(QtCore.QRect(50, 110, 181, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.stacked_label_cmd_input.setFont(font)
        self.stacked_label_cmd_input.setObjectName("stacked_label_cmd_input")
        #####
        self.stacked_button_cmd_input = QtWidgets.QPushButton(parent=self.stacked_wid_cmd)
        self.stacked_button_cmd_input.setGeometry(QtCore.QRect(230, 150, 121, 41))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.stacked_button_cmd_input.sizePolicy().hasHeightForWidth())
        self.stacked_button_cmd_input.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.stacked_button_cmd_input.setFont(font)
        self.stacked_button_cmd_input.setStyleSheet("QPushButton{background-color: rgb(9, 9, 19);\n"
"border :3px solid white;\n"
"border-radius:10px;\n"
"}\n"
"\n"
"\n"
"QPushButton:hover{\n"
"    background-color: rgb(100, 100, 100);\n"
"border-radius:10px;\n"
"}\n"
"\n"
"QPushButton:pressed{;\n"
";\n"
"    background-color: rgb(67, 67, 82);\n"
"border-radius:10px;\n"
"}")
        self.stacked_button_cmd_input.setObjectName("stacked_button_cmd_input")
        ####
        
#         self.stacked_label_cmd_preview = QtWidgets.QLabel(parent=self.stacked_wid_cmd)
#         self.stacked_label_cmd_preview.setGeometry(QtCore.QRect(50, 160, 71, 31))
#         font = QtGui.QFont()
#         font.setPointSize(16)
#         self.stacked_label_cmd_preview.setFont(font)
#         self.stacked_label_cmd_preview.setObjectName("stacked_label_cmd_preview")
        self.stacked_button_cmd_output = QtWidgets.QPushButton(parent=self.stacked_wid_cmd)
        self.stacked_button_cmd_output.setGeometry(QtCore.QRect(470, 400, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.stacked_button_cmd_output.setFont(font)
        self.stacked_button_cmd_output.setStyleSheet("QPushButton{background-color: rgb(9, 9, 19);\n"
"border :1px solid white;\n"
"border-radius:10px;\n"
"}\n"
"\n"
"\n"
"QPushButton:hover{\n"
"    background-color: rgb(50, 50, 50);\n"
"border-radius:10px;\n"
"}\n"
"\n"
"QPushButton:pressed{;\n"
";\n"
"    background-color: rgb(100, 100, 100);\n"
"border-radius:10px;\n"
"}")
        self.stacked_button_cmd_output.setObjectName("stacked_button_cmd_output")
#         self.stacked_table_cmd_preview = QtWidgets.QTableWidget(parent=self.stacked_wid_cmd)
#         self.stacked_table_cmd_preview.setGeometry(QtCore.QRect(140, 150, 401, 101))
#         self.stacked_table_cmd_preview.setAutoFillBackground(False)
#         self.stacked_table_cmd_preview.setStyleSheet("QHeaderView::section { color:white; background-color:#0d0d11; }\n"
# "QTableCornerButton::section { background-color:#0d0d11; }\n"
# "QTableView::item:selected { color:white; background:#000000; font-weight:900; }\n"
# "\n"
# "\n"
# "\n"
# "\n"
# "")
#         self.stacked_table_cmd_preview.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)
#         self.stacked_table_cmd_preview.setObjectName("stacked_table_cmd_preview")
#         self.stacked_table_cmd_preview.setColumnCount(0)
#         self.stacked_table_cmd_preview.setRowCount(0)
        self.stackedWidget.addWidget(self.stacked_wid_cmd)
#         self.stacked_wid_validate = QtWidgets.QWidget()
#         self.stacked_wid_validate.setObjectName("stacked_wid_validate")
#         self.stacked_label_validate_main = QtWidgets.QLabel(parent=self.stacked_wid_validate)
#         self.stacked_label_validate_main.setGeometry(QtCore.QRect(170, 30, 231, 41))
#         sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
#         sizePolicy.setHorizontalStretch(0)
#         sizePolicy.setVerticalStretch(0)
#         sizePolicy.setHeightForWidth(self.stacked_label_validate_main.sizePolicy().hasHeightForWidth())
#         self.stacked_label_validate_main.setSizePolicy(sizePolicy)
#         self.stacked_label_validate_main.setStyleSheet("color: rgb(255, 255, 255);")
#         self.stacked_label_validate_main.setObjectName("stacked_label_validate_main")
#         self.stacked_lineedit_validate_previos = QtWidgets.QLineEdit(parent=self.stacked_wid_validate)
#         self.stacked_lineedit_validate_previos.setGeometry(QtCore.QRect(100, 140, 441, 31))
#         font = QtGui.QFont()
#         font.setPointSize(10)
#         self.stacked_lineedit_validate_previos.setFont(font)
#         self.stacked_lineedit_validate_previos.setStyleSheet("QLineEdit{background-color: rgb(255, 255, 255);\n"
# "border-radius:10px;\n"
# "color: rgb(0, 3, 57);\n"
# "\n"
# "\n"
# "}\n"
# "\n"
# "QLineEdit:focus{background-color: rgb(255, 255, 255);\n"
# "border-radius:10px;\n"
# "border:2px solid #FBAD25;\n"
# "color: rgb(0, 3, 57);\n"
# "\n"
# "\n"
# "}")
#         self.stacked_lineedit_validate_previos.setLocale(QtCore.QLocale(QtCore.QLocale.Language.English, QtCore.QLocale.Country.UnitedStates))
#         self.stacked_lineedit_validate_previos.setInputMask("")
#         self.stacked_lineedit_validate_previos.setText("")
#         self.stacked_lineedit_validate_previos.setFrame(True)
#         self.stacked_lineedit_validate_previos.setEchoMode(QtWidgets.QLineEdit.EchoMode.Normal)
#         self.stacked_lineedit_validate_previos.setCursorPosition(0)
#         self.stacked_lineedit_validate_previos.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
#         self.stacked_lineedit_validate_previos.setDragEnabled(False)
#         self.stacked_lineedit_validate_previos.setReadOnly(False)
#         self.stacked_lineedit_validate_previos.setCursorMoveStyle(QtCore.Qt.CursorMoveStyle.VisualMoveStyle)
#         self.stacked_lineedit_validate_previos.setClearButtonEnabled(True)
#         self.stacked_lineedit_validate_previos.setObjectName("stacked_lineedit_validate_previos")
#         self.stacked_label_validate_previous = QtWidgets.QLabel(parent=self.stacked_wid_validate)
#         self.stacked_label_validate_previous.setGeometry(QtCore.QRect(60, 90, 391, 41))
#         font = QtGui.QFont()
#         font.setPointSize(13)
#         self.stacked_label_validate_previous.setFont(font)
#         self.stacked_label_validate_previous.setObjectName("stacked_label_validate_previous")
#         self.stacked_label_validate_current = QtWidgets.QLabel(parent=self.stacked_wid_validate)
#         self.stacked_label_validate_current.setGeometry(QtCore.QRect(60, 200, 391, 41))
#         font = QtGui.QFont()
#         font.setPointSize(13)
#         self.stacked_label_validate_current.setFont(font)
#         self.stacked_label_validate_current.setObjectName("stacked_label_validate_current")
#         self.stacked_lineedit_validate_current = QtWidgets.QLineEdit(parent=self.stacked_wid_validate)
#         self.stacked_lineedit_validate_current.setGeometry(QtCore.QRect(100, 250, 441, 31))
#         font = QtGui.QFont()
#         font.setPointSize(10)
#         self.stacked_lineedit_validate_current.setFont(font)
#         self.stacked_lineedit_validate_current.setStyleSheet("QLineEdit{background-color: rgb(255, 255, 255);\n"
# "border-radius:10px;\n"
# "color: rgb(0, 3, 57);\n"
# "\n"
# "\n"
# "}\n"
# "\n"
# "QLineEdit:focus{background-color: rgb(255, 255, 255);\n"
# "border-radius:10px;\n"
# "border:2px solid #FBAD25;\n"
# "color: rgb(0, 3, 57);\n"
# "\n"
# "\n"
# "}")
#         self.stacked_lineedit_validate_current.setLocale(QtCore.QLocale(QtCore.QLocale.Language.English, QtCore.QLocale.Country.UnitedStates))
#         self.stacked_lineedit_validate_current.setInputMask("")
#         self.stacked_lineedit_validate_current.setText("")
#         self.stacked_lineedit_validate_current.setFrame(True)
#         self.stacked_lineedit_validate_current.setEchoMode(QtWidgets.QLineEdit.EchoMode.Normal)
#         self.stacked_lineedit_validate_current.setCursorPosition(0)
#         self.stacked_lineedit_validate_current.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
#         self.stacked_lineedit_validate_current.setDragEnabled(False)
#         self.stacked_lineedit_validate_current.setReadOnly(False)
#         self.stacked_lineedit_validate_current.setCursorMoveStyle(QtCore.Qt.CursorMoveStyle.VisualMoveStyle)
#         self.stacked_lineedit_validate_current.setClearButtonEnabled(True)
#         self.stacked_lineedit_validate_current.setObjectName("stacked_lineedit_validate_current")
#         self.stacked_label_validate_thresh = QtWidgets.QLabel(parent=self.stacked_wid_validate)
#         self.stacked_label_validate_thresh.setGeometry(QtCore.QRect(70, 320, 171, 31))
#         font = QtGui.QFont()
#         font.setPointSize(16)
#         self.stacked_label_validate_thresh.setFont(font)
#         self.stacked_label_validate_thresh.setObjectName("stacked_label_validate_thresh")
#         self.stacked_lineedit_validate_threshold = QtWidgets.QLineEdit(parent=self.stacked_wid_validate)
#         self.stacked_lineedit_validate_threshold.setGeometry(QtCore.QRect(240, 320, 121, 31))
#         font = QtGui.QFont()
#         font.setPointSize(10)
#         self.stacked_lineedit_validate_threshold.setFont(font)
#         self.stacked_lineedit_validate_threshold.setStyleSheet("QLineEdit{background-color: rgb(255, 255, 255);\n"
# "border-radius:10px;\n"
# "color: rgb(0, 3, 57);\n"
# "\n"
# "\n"
# "}\n"
# "\n"
# "QLineEdit:focus{background-color: rgb(255, 255, 255);\n"
# "border-radius:10px;\n"
# "border:2px solid #FBAD25;\n"
# "color: rgb(0, 3, 57);\n"
# "\n"
# "\n"
# "}")
#         self.stacked_lineedit_validate_threshold.setInputMethodHints(QtCore.Qt.InputMethodHint.ImhFormattedNumbersOnly)
#         self.stacked_lineedit_validate_threshold.setText("")
#         self.stacked_lineedit_validate_threshold.setFrame(False)
#         self.stacked_lineedit_validate_threshold.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
#         self.stacked_lineedit_validate_threshold.setDragEnabled(True)
#         self.stacked_lineedit_validate_threshold.setClearButtonEnabled(True)
#         self.stacked_lineedit_validate_threshold.setObjectName("stacked_lineedit_validate_threshold")
#         self.stacked_button_validate_report = QtWidgets.QPushButton(parent=self.stacked_wid_validate)
#         self.stacked_button_validate_report.setGeometry(QtCore.QRect(480, 400, 91, 31))
#         font = QtGui.QFont()
#         font.setPointSize(11)
#         self.stacked_button_validate_report.setFont(font)
#         self.stacked_button_validate_report.setStyleSheet("QPushButton{background-color: rgb(9, 9, 19);\n"
# "border :1px solid white;\n"
# "border-radius:10px;\n"
# "}\n"
# "\n"
# "\n"
# "QPushButton:hover{\n"
# "    background-color: rgb(50, 50, 50);\n"
# "border-radius:10px;\n"
# "}\n"
# "\n"
# "QPushButton:pressed{;\n"
# ";\n"
# "    background-color: rgb(100, 100, 100);\n"
# "border-radius:10px;\n"
# "}")
#         self.stacked_button_validate_report.setObjectName("stacked_button_validate_report")
#         self.stacked_button_validate_validate = QtWidgets.QPushButton(parent=self.stacked_wid_validate)
#         self.stacked_button_validate_validate.setGeometry(QtCore.QRect(210, 380, 171, 51))
#         sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
#         sizePolicy.setHorizontalStretch(0)
#         sizePolicy.setVerticalStretch(0)
#         sizePolicy.setHeightForWidth(self.stacked_button_validate_validate.sizePolicy().hasHeightForWidth())
#         self.stacked_button_validate_validate.setSizePolicy(sizePolicy)
#         font = QtGui.QFont()
#         font.setPointSize(16)
#         self.stacked_button_validate_validate.setFont(font)
#         self.stacked_button_validate_validate.setStyleSheet("QPushButton{background-color: rgb(9, 9, 19);\n"
# "border :3px solid white;\n"
# "border-radius:10px;\n"
# "}\n"
# "\n"
# "\n"
# "QPushButton:hover{\n"
# "    background-color: rgb(100, 100, 100);\n"
# "border-radius:10px;\n"
# "}\n"
# "\n"
# "QPushButton:pressed{;\n"
# ";\n"
# "    background-color: rgb(67, 67, 82);\n"
# "border-radius:10px;\n"
# "}")
#         self.stacked_button_validate_validate.setObjectName("stacked_button_validate_validate")
#         self.stackedWidget.addWidget(self.stacked_wid_validate)
        self.stacked_wid_db = QtWidgets.QWidget()
        self.stacked_wid_db.setObjectName("stacked_wid_db")
        self.stacked_label_db_main = QtWidgets.QLabel(parent=self.stacked_wid_db)
        self.stacked_label_db_main.setGeometry(QtCore.QRect(130, 30, 321, 41))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.stacked_label_db_main.sizePolicy().hasHeightForWidth())
        self.stacked_label_db_main.setSizePolicy(sizePolicy)
        self.stacked_label_db_main.setStyleSheet("color: rgb(255, 255, 255);")
        self.stacked_label_db_main.setObjectName("stacked_label_db_main")
        self.stacked_button_db_output = QtWidgets.QPushButton(parent=self.stacked_wid_db)
        self.stacked_button_db_output.setGeometry(QtCore.QRect(470, 400, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.stacked_button_db_output.setFont(font)
        self.stacked_button_db_output.setStyleSheet("QPushButton{background-color: rgb(9, 9, 19);\n"
"border :1px solid white;\n"
"border-radius:10px;\n"
"}\n"
"\n"
"\n"
"QPushButton:hover{\n"
"    background-color: rgb(50, 50, 50);\n"
"border-radius:10px;\n"
"}\n"
"\n"
"QPushButton:pressed{;\n"
";\n"
"    background-color: rgb(100, 100, 100);\n"
"border-radius:10px;\n"
"}")
        self.stacked_button_db_output.setObjectName("stacked_button_db_output")
        self.stacked_lineedit_db_export = QtWidgets.QLineEdit(parent=self.stacked_wid_db)
        self.stacked_lineedit_db_export.setGeometry(QtCore.QRect(80, 280, 441, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.stacked_lineedit_db_export.setFont(font)
        self.stacked_lineedit_db_export.setStyleSheet("QLineEdit{background-color: rgb(255, 255, 255);\n"
"border-radius:10px;\n"
"color: rgb(0, 3, 57);\n"
"\n"
"\n"
"}\n"
"\n"
"QLineEdit:focus{background-color: rgb(255, 255, 255);\n"
"border-radius:10px;\n"
"border:2px solid #FBAD25;\n"
"color: rgb(0, 3, 57);\n"
"\n"
"\n"
"}")
        self.stacked_lineedit_db_export.setLocale(QtCore.QLocale(QtCore.QLocale.Language.English, QtCore.QLocale.Country.UnitedStates))
        self.stacked_lineedit_db_export.setInputMask("")
        self.stacked_lineedit_db_export.setText("")
        self.stacked_lineedit_db_export.setFrame(True)
        self.stacked_lineedit_db_export.setEchoMode(QtWidgets.QLineEdit.EchoMode.Normal)
        self.stacked_lineedit_db_export.setCursorPosition(0)
        self.stacked_lineedit_db_export.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.stacked_lineedit_db_export.setDragEnabled(False)
        self.stacked_lineedit_db_export.setReadOnly(False)
        self.stacked_lineedit_db_export.setCursorMoveStyle(QtCore.Qt.CursorMoveStyle.VisualMoveStyle)
        self.stacked_lineedit_db_export.setClearButtonEnabled(True)
        self.stacked_lineedit_db_export.setObjectName("stacked_lineedit_db_export")
        self.stacked_button_db_export = QtWidgets.QPushButton(parent=self.stacked_wid_db)
        self.stacked_button_db_export.setGeometry(QtCore.QRect(210, 340, 181, 51))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.stacked_button_db_export.sizePolicy().hasHeightForWidth())
        self.stacked_button_db_export.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(16)
        self.stacked_button_db_export.setFont(font)
        self.stacked_button_db_export.setStyleSheet("QPushButton{background-color: rgb(9, 9, 19);\n"
"border :3px solid white;\n"
"border-radius:10px;\n"
"}\n"
"\n"
"\n"
"QPushButton:hover{\n"
"    background-color: rgb(100, 100, 100);\n"
"border-radius:10px;\n"
"}\n"
"\n"
"QPushButton:pressed{;\n"
";\n"
"    background-color: rgb(67, 67, 82);\n"
"border-radius:10px;\n"
"}")
        self.stacked_button_db_export.setObjectName("stacked_button_db_export")
        self.stacked_label_db_export = QtWidgets.QLabel(parent=self.stacked_wid_db)
        self.stacked_label_db_export.setGeometry(QtCore.QRect(70, 210, 121, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.stacked_label_db_export.setFont(font)
        self.stacked_label_db_export.setObjectName("stacked_label_db_export")
        self.stacked_button_db_input = QtWidgets.QPushButton(parent=self.stacked_wid_db)
        self.stacked_button_db_input.setGeometry(QtCore.QRect(230, 150, 121, 41))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.stacked_button_db_input.sizePolicy().hasHeightForWidth())
        self.stacked_button_db_input.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.stacked_button_db_input.setFont(font)
        self.stacked_button_db_input.setStyleSheet("QPushButton{background-color: rgb(9, 9, 19);\n"
"border :3px solid white;\n"
"border-radius:10px;\n"
"}\n"
"\n"
"\n"
"QPushButton:hover{\n"
"    background-color: rgb(100, 100, 100);\n"
"border-radius:10px;\n"
"}\n"
"\n"
"QPushButton:pressed{;\n"
";\n"
"    background-color: rgb(67, 67, 82);\n"
"border-radius:10px;\n"
"}")
        self.stacked_button_db_input.setObjectName("stacked_button_db_input")
        self.stacked_label_db_input = QtWidgets.QLabel(parent=self.stacked_wid_db)
        self.stacked_label_db_input.setGeometry(QtCore.QRect(50, 110, 161, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(False)
        self.stacked_label_db_input.setFont(font)
        self.stacked_label_db_input.setObjectName("stacked_label_db_input")
        self.stackedWidget.addWidget(self.stacked_wid_db)
        self.stacked_wid_merge = QtWidgets.QWidget()
        self.stacked_wid_merge.setObjectName("stacked_wid_merge")
        self.stacked_label_merge_main = QtWidgets.QLabel(parent=self.stacked_wid_merge)
        self.stacked_label_merge_main.setGeometry(QtCore.QRect(140, 30, 321, 41))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.stacked_label_merge_main.sizePolicy().hasHeightForWidth())
        self.stacked_label_merge_main.setSizePolicy(sizePolicy)
        self.stacked_label_merge_main.setStyleSheet("color: rgb(255, 255, 255);")
        self.stacked_label_merge_main.setObjectName("stacked_label_merge_main")
        self.stacked_lineedit_merge_location = QtWidgets.QLineEdit(parent=self.stacked_wid_merge)
        self.stacked_lineedit_merge_location.setGeometry(QtCore.QRect(70, 130, 441, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.stacked_lineedit_merge_location.sizePolicy().hasHeightForWidth())
        self.stacked_lineedit_merge_location.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.stacked_lineedit_merge_location.setFont(font)
        self.stacked_lineedit_merge_location.setStyleSheet("QLineEdit{background-color: rgb(255, 255, 255);\n"
"border-radius:10px;\n"
"color: rgb(0, 3, 57);\n"
"\n"
"\n"
"}\n"
"\n"
"QLineEdit:focus{background-color: rgb(255, 255, 255);\n"
"border-radius:10px;\n"
"border:2px solid #FBAD25;\n"
"color: rgb(0, 3, 57);\n"
"\n"
"\n"
"}")
        self.stacked_lineedit_merge_location.setText("")
        self.stacked_lineedit_merge_location.setClearButtonEnabled(True)
        self.stacked_lineedit_merge_location.setObjectName("stacked_lineedit_merge_location")
        self.stacked_checkbox_merge_toc = QtWidgets.QCheckBox(parent=self.stacked_wid_merge)
        self.stacked_checkbox_merge_toc.setGeometry(QtCore.QRect(100, 170, 261, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.stacked_checkbox_merge_toc.setFont(font)
        self.stacked_checkbox_merge_toc.setIconSize(QtCore.QSize(25, 25))
        self.stacked_checkbox_merge_toc.setChecked(True)
        self.stacked_checkbox_merge_toc.setTristate(False)
        self.stacked_checkbox_merge_toc.setObjectName("stacked_checkbox_merge_toc")
        ###manual exten
        
        self.stacked_lineedit_merge_extension = QtWidgets.QLineEdit(parent=self.stacked_wid_merge)
        self.stacked_lineedit_merge_extension.setObjectName("stacked_lineedit_merge_extension")
        self.stacked_lineedit_merge_extension.setGeometry(QtCore.QRect(250, 340, 121, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.stacked_lineedit_merge_extension.sizePolicy().hasHeightForWidth())
        self.stacked_lineedit_merge_extension.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.stacked_lineedit_merge_extension.setFont(font)
        self.stacked_lineedit_merge_extension.setStyleSheet("QLineEdit{background-color: rgb(255, 255, 255);\n"
"border-radius:10px;\n"
"color: rgb(0, 3, 57);\n"
"\n"
"\n"
"}\n"
"\n"
"QLineEdit:focus{background-color: rgb(255, 255, 255);\n"
"border-radius:10px;\n"
"border:2px solid #FBAD25;\n"
"color: rgb(0, 3, 57);\n"
"\n"
"\n"
"}")
        self.stacked_lineedit_merge_extension.setText("")
        self.stacked_lineedit_merge_extension.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.stacked_lineedit_merge_extension.setClearButtonEnabled(True)
        self.stacked_label_merge_export = QtWidgets.QLabel(parent=self.stacked_wid_merge)
        self.stacked_label_merge_export.setGeometry(QtCore.QRect(70,195, 201, 41))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.stacked_label_merge_export.sizePolicy().hasHeightForWidth())
        self.stacked_label_merge_export.setSizePolicy(sizePolicy)
        self.stacked_label_merge_export.setStyleSheet("color: rgb(255, 255, 255);")
        self.stacked_label_merge_export.setObjectName("stacked_label_merge_export")
###############
        self.stacked_label_merge_extension = QtWidgets.QLabel(parent=self.stacked_wid_merge)
        self.stacked_label_merge_extension.setGeometry(QtCore.QRect(170,333, 78, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.stacked_label_merge_extension.setFont(font)
        self.stacked_label_merge_extension.setObjectName("stacked_label_merge_extension")
################
        self.stacked_label_merge_name = QtWidgets.QLabel(parent=self.stacked_wid_merge)
        self.stacked_label_merge_name.setGeometry(QtCore.QRect(143,283, 181, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.stacked_label_merge_name.setFont(font)
        self.stacked_label_merge_name.setObjectName("stacked_label_merge_name")

##############
        self.stacked_lineedit_merge_name = QtWidgets.QLineEdit(parent=self.stacked_wid_merge)
        self.stacked_lineedit_merge_name.setGeometry(QtCore.QRect(248, 290, 220, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.stacked_lineedit_merge_name.sizePolicy().hasHeightForWidth())
        self.stacked_lineedit_merge_name.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.stacked_lineedit_merge_name.setFont(font)
        self.stacked_lineedit_merge_name.setStyleSheet("QLineEdit{background-color: rgb(255, 255, 255);\n"
"border-radius:10px;\n"
"color: rgb(0, 3, 57);\n"
"\n"
"\n"
"}\n"
"\n"
"QLineEdit:focus{background-color: rgb(255, 255, 255);\n"
"border-radius:10px;\n"
"border:2px solid #FBAD25;\n"
"color: rgb(0, 3, 57);\n"
"\n"
"\n"
"}")
        self.stacked_lineedit_merge_name.setText("")
        self.stacked_lineedit_merge_name.setClearButtonEnabled(True)
        self.stacked_lineedit_merge_name.setObjectName("stacked_lineedit_merge_name")
##########
        self.stacked_lineedit_merge_export = QtWidgets.QLineEdit(parent=self.stacked_wid_merge)
        self.stacked_lineedit_merge_export.setGeometry(QtCore.QRect(85, 240, 420, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.stacked_lineedit_merge_export.sizePolicy().hasHeightForWidth())
        self.stacked_lineedit_merge_export.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.stacked_lineedit_merge_export.setFont(font)
        self.stacked_lineedit_merge_export.setStyleSheet("QLineEdit{background-color: rgb(255, 255, 255);\n"
"border-radius:10px;\n"
"color: rgb(0, 3, 57);\n"
"\n"
"\n"
"}\n"
"\n"
"QLineEdit:focus{background-color: rgb(255, 255, 255);\n"
"border-radius:10px;\n"
"border:2px solid #FBAD25;\n"
"color: rgb(0, 3, 57);\n"
"\n"
"\n"
"}")
        self.stacked_lineedit_merge_export.setText("")
        self.stacked_lineedit_merge_export.setClearButtonEnabled(True)
        self.stacked_lineedit_merge_export.setObjectName("stacked_lineedit_merge_export")
#####################
        self.stacked_button_merge_merge = QtWidgets.QPushButton(parent=self.stacked_wid_merge)
        self.stacked_button_merge_merge.setGeometry(QtCore.QRect(200, 400, 171, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.stacked_button_merge_merge.setFont(font)
        self.stacked_button_merge_merge.setStyleSheet("QPushButton{background-color: rgb(9, 9, 19);\n"
"border :3px solid white;\n"
"border-radius:10px;\n"
"}\n"
"\n"
"\n"
"QPushButton:hover{\n"
"    background-color: rgb(100, 100, 100);\n"
"border-radius:10px;\n"
"}\n"
"\n"
"QPushButton:pressed{;\n"
";\n"
"    background-color: rgb(67, 67, 82);\n"
"border-radius:10px;\n"
"}")
        self.stacked_button_merge_merge.setObjectName("stacked_button_merge_merge")
        self.stacked_label_merge_location = QtWidgets.QLabel(parent=self.stacked_wid_merge)
        self.stacked_label_merge_location.setGeometry(QtCore.QRect(60,80, 301, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.stacked_label_merge_location.setFont(font)
        self.stacked_label_merge_location.setObjectName("stacked_label_merge_location")
        self.stacked_button_merge_output = QtWidgets.QPushButton(parent=self.stacked_wid_merge)
        self.stacked_button_merge_output.setGeometry(QtCore.QRect(460, 410, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.stacked_button_merge_output.setFont(font)
        self.stacked_button_merge_output.setStyleSheet("QPushButton{background-color: rgb(9, 9, 19);\n"
"border :1px solid white;\n"
"border-radius:10px;\n"
"}\n"
"\n"
"\n"
"QPushButton:hover{\n"
"    background-color: rgb(50, 50, 50);\n"
"border-radius:10px;\n"
"}\n"
"\n"
"QPushButton:pressed{;\n"
";\n"
"    background-color: rgb(100, 100, 100);\n"
"border-radius:10px;\n"
"}")
        self.stacked_button_merge_output.setObjectName("stacked_button_merge_output")
        self.stackedWidget.addWidget(self.stacked_wid_merge)
        self.gridLayout.addWidget(self.stackedWidget, 1, 0, 1, 2)
        spacerItem3 = QtWidgets.QSpacerItem(20, 0, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.gridLayout.addItem(spacerItem3, 2, 1, 1, 1)
        spacerItem4 = QtWidgets.QSpacerItem(540, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout.addItem(spacerItem4, 3, 0, 1, 1)
        self.button_bottom_window_info = QtWidgets.QPushButton(parent=self.right_menu_frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.button_bottom_window_info.sizePolicy().hasHeightForWidth())
        self.button_bottom_window_info.setSizePolicy(sizePolicy)
        self.button_bottom_window_info.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(resource_path("icons/winio/about.png")), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.button_bottom_window_info.setIcon(icon3)
        self.button_bottom_window_info.setIconSize(QtCore.QSize(30, 30))
        self.button_bottom_window_info.setObjectName("button_bottom_window_info")
        self.gridLayout.addWidget(self.button_bottom_window_info, 3, 1, 1, 1)
        self.gridLayout_9.addWidget(self.right_menu_frame, 0, 1, 1, 1)
        self.left_menu_frame = QtWidgets.QFrame(parent=self.mainmenu)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.left_menu_frame.sizePolicy().hasHeightForWidth())
        self.left_menu_frame.setSizePolicy(sizePolicy)
        self.left_menu_frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.left_menu_frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.left_menu_frame.setObjectName("left_menu_frame")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.left_menu_frame)
        self.gridLayout_4.setObjectName("gridLayout_4")
        spacerItem5 = QtWidgets.QSpacerItem(0, 60, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_4.addItem(spacerItem5, 0, 0, 1, 1)
        self.leftname_frame = QtWidgets.QFrame(parent=self.left_menu_frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.leftname_frame.sizePolicy().hasHeightForWidth())
        self.leftname_frame.setSizePolicy(sizePolicy)
        self.leftname_frame.setMinimumSize(QtCore.QSize(230, 100))
        self.leftname_frame.setMaximumSize(QtCore.QSize(230, 800))
      
        self.leftname_frame.setStyleSheet("QFrame#leftname_frame{\n"
"\n"
"background-color: rgb(255, 255, 255);\n"
"border-radius:25px;\n"
"border: 2px solid white;\n"
"\n"
"}")
        self.leftname_frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.leftname_frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.leftname_frame.setObjectName("leftname_frame")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.leftname_frame)
        self.gridLayout_3.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_3.setSpacing(0)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.leftname_frame_merge = QtWidgets.QFrame(parent=self.leftname_frame)
        self.leftname_frame_merge.setStyleSheet("\n"
"\n"
"QFrame{\n"
"    \n"
"    background-color: rgb(255, 255, 255);\n"
"                \n"
"    color: rgb(255, 255, 255);\n"
"border-radius:0px;\n"
"            }\n"
"            \n"
"            QFrame:hover {\n"
"              \n"
"\n"
"    background-color: rgb(0, 8, 129);\n"
"border-radius:10px;\n"
"\n"
"               cursor: pointer;\n"
"            }\n"
"\n"
"\n"
"            QFrame:focus {\n"
"              \n"
"\n"
"    background-color: rgb(0, 8, 129);\n"
"border-radius:10px;\n"
"\n"
"               cursor: pointer;\n"
"            }\n"
"\n"
"\n"
"")
        self.leftname_frame_merge.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.leftname_frame_merge.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.leftname_frame_merge.setObjectName("leftname_frame_merge")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.leftname_frame_merge)
        self.verticalLayout_7.setContentsMargins(25, -1, 20, -1)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.leftname_button_merge = QtWidgets.QPushButton(parent=self.leftname_frame_merge)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.leftname_button_merge.sizePolicy().hasHeightForWidth())
        self.leftname_button_merge.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.leftname_button_merge.setFont(font)
        self.leftname_button_merge.setStyleSheet("QPushButton{\n"
"\n"
"                \n"
"    background-color: rgb(255, 255, 255);\n"
"border-radius:5px;\n"
"            }\n"
"            \n"
"                \n"
"\n"
"\n"
"")
        icon4 = QtGui.QIcon()
        #test1/icons/left/
        icon4.addPixmap(QtGui.QPixmap(resource_path("icons/left/merge.png")), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.leftname_button_merge.setIcon(icon4)
        self.leftname_button_merge.setIconSize(QtCore.QSize(30, 30))
        self.leftname_button_merge.setCheckable(True)
        self.leftname_button_merge.setChecked(False)
        self.leftname_button_merge.setAutoExclusive(True)
        self.leftname_button_merge.setAutoDefault(False)
        self.leftname_button_merge.setFlat(False)
        self.leftname_button_merge.setObjectName("leftname_button_merge")
        self.verticalLayout_7.addWidget(self.leftname_button_merge, 0, QtCore.Qt.AlignmentFlag.AlignLeft)
        self.gridLayout_3.addWidget(self.leftname_frame_merge, 9, 0, 1, 1, QtCore.Qt.AlignmentFlag.AlignLeft)
        spacerItem6 = QtWidgets.QSpacerItem(162, 16, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.gridLayout_3.addItem(spacerItem6, 4, 0, 1, 1)
        spacerItem7 = QtWidgets.QSpacerItem(162, 16, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.gridLayout_3.addItem(spacerItem7, 10, 0, 1, 1)
        self.leftname_frame_rename = QtWidgets.QFrame(parent=self.leftname_frame)
        self.leftname_frame_rename.setStyleSheet("\n"
"\n"
"QFrame{\n"
"    \n"
"    background-color: rgb(255, 255, 255);\n"
"                \n"
"    color: rgb(255, 255, 255);\n"
"border-radius:0px;\n"
"            }\n"
"            \n"
"            QFrame:hover {\n"
"              \n"
"\n"
"    background-color: rgb(0, 8, 129);\n"
"border-radius:10px;\n"
"\n"
"               cursor: pointer;\n"
"            }\n"
"\n"
"\n"
"            QFrame:focus {\n"
"              \n"
"\n"
"    background-color: rgb(0, 8, 129);\n"
"border-radius:10px;\n"
"\n"
"               cursor: pointer;\n"
"            }\n"
"\n"
"\n"
"")
        self.leftname_frame_rename.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.leftname_frame_rename.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.leftname_frame_rename.setObjectName("leftname_frame_rename")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.leftname_frame_rename)
        self.verticalLayout_5.setContentsMargins(25, -1, 20, -1)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.leftname_button_rename = QtWidgets.QPushButton(parent=self.leftname_frame_rename)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.leftname_button_rename.sizePolicy().hasHeightForWidth())
        self.leftname_button_rename.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.leftname_button_rename.setFont(font)
        self.leftname_button_rename.setStyleSheet("QPushButton{\n"
"\n"
"                \n"
"    background-color: rgb(255, 255, 255);\n"
"border-radius:5px;\n"
"            }\n"
"            \n"
"                \n"
"\n"
"\n"
"")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(resource_path("icons/left/rename.png")), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        icon5.addPixmap(QtGui.QPixmap(resource_path("icons/left/rename.png")), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.On)
        self.leftname_button_rename.setIcon(icon5)
        self.leftname_button_rename.setIconSize(QtCore.QSize(30, 30))
        self.leftname_button_rename.setCheckable(True)
        self.leftname_button_rename.setAutoExclusive(True)
        self.leftname_button_rename.setObjectName("leftname_button_rename")
        self.verticalLayout_5.addWidget(self.leftname_button_rename, 0, QtCore.Qt.AlignmentFlag.AlignLeft)
        self.gridLayout_3.addWidget(self.leftname_frame_rename, 1, 0, 1, 1, QtCore.Qt.AlignmentFlag.AlignLeft)
        self.leftname_frame_cmd = QtWidgets.QFrame(parent=self.leftname_frame)
        self.leftname_frame_cmd.setStyleSheet("\n"
"\n"
"QFrame{\n"
"    \n"
"    background-color: rgb(255, 255, 255);\n"
"                \n"
"    color: rgb(255, 255, 255);\n"
"border-radius:0px;\n"
"            }\n"
"            \n"
"            QFrame:hover {\n"
"              \n"
"\n"
"    background-color: rgb(0, 8, 129);\n"
"border-radius:10px;\n"
"\n"
"               cursor: pointer;\n"
"            }\n"
"\n"
"\n"
"            QFrame:focus {\n"
"              \n"
"\n"
"    background-color: rgb(0, 8, 129);\n"
"border-radius:10px;\n"
"\n"
"               cursor: pointer;\n"
"            }\n"
"\n"
"\n"
"")
        self.leftname_frame_cmd.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.leftname_frame_cmd.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.leftname_frame_cmd.setObjectName("leftname_frame_cmd")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.leftname_frame_cmd)
        self.verticalLayout_4.setContentsMargins(25, -1, 20, -1)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.leftname_button_cmd = QtWidgets.QPushButton(parent=self.leftname_frame_cmd)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.leftname_button_cmd.sizePolicy().hasHeightForWidth())
        self.leftname_button_cmd.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.leftname_button_cmd.setFont(font)
        self.leftname_button_cmd.setStyleSheet("QPushButton{\n"
"\n"
"                \n"
"    background-color: rgb(255, 255, 255);\n"
"border-radius:5px;\n"
"            }\n"
"            \n"
"                \n"
"\n"
"\n"
"")
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(resource_path("icons/left/cmd.png")), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.leftname_button_cmd.setIcon(icon6)
        self.leftname_button_cmd.setIconSize(QtCore.QSize(30, 30))
        self.leftname_button_cmd.setCheckable(True)
        self.leftname_button_cmd.setAutoExclusive(True)
        self.leftname_button_cmd.setObjectName("leftname_button_cmd")
        self.verticalLayout_4.addWidget(self.leftname_button_cmd, 0, QtCore.Qt.AlignmentFlag.AlignLeft)
        self.gridLayout_3.addWidget(self.leftname_frame_cmd, 3, 0, 1, 1, QtCore.Qt.AlignmentFlag.AlignLeft)
#         self.leftname_frame_validate = QtWidgets.QFrame(parent=self.leftname_frame)
#         self.leftname_frame_validate.setStyleSheet("\n"
# "\n"
# "QFrame{\n"
# "    \n"
# "    background-color: rgb(255, 255, 255);\n"
# "                \n"
# "    color: rgb(255, 255, 255);\n"
# "border-radius:0px;\n"
# "            }\n"
# "            \n"
# "            QFrame:hover {\n"
# "              \n"
# "\n"
# "    background-color: rgb(0, 8, 129);\n"
# "border-radius:10px;\n"
# "\n"
# "               cursor: pointer;\n"
# "            }\n"
# "\n"
# "\n"
# "            QFrame:focus {\n"
# "              \n"
# "\n"
# "    background-color: rgb(0, 8, 129);\n"
# "border-radius:10px;\n"
# "\n"
# "               cursor: pointer;\n"
# "            }\n"
# "\n"
# "\n"
# "")
#         self.leftname_frame_validate.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
#         self.leftname_frame_validate.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
#         self.leftname_frame_validate.setObjectName("leftname_frame_validate")
#         self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.leftname_frame_validate)
#         self.verticalLayout_3.setContentsMargins(25, -1, 20, -1)
#         self.verticalLayout_3.setSpacing(10)
#         self.verticalLayout_3.setObjectName("verticalLayout_3")
#         self.leftname_button_validate = QtWidgets.QPushButton(parent=self.leftname_frame_validate)
#         sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
#         sizePolicy.setHorizontalStretch(0)
#         sizePolicy.setVerticalStretch(0)
#         sizePolicy.setHeightForWidth(self.leftname_button_validate.sizePolicy().hasHeightForWidth())
#         self.leftname_button_validate.setSizePolicy(sizePolicy)
#         font = QtGui.QFont()
#         font.setPointSize(13)
#         self.leftname_button_validate.setFont(font)
#         self.leftname_button_validate.setStyleSheet("QPushButton{\n"
# "\n"
# "                \n"
# "    background-color: rgb(255, 255, 255);\n"
# "border-radius:5px;\n"
# "            }\n"
# "            \n"
# "                \n"
# "\n"
# "\n"
# "")
#         icon7 = QtGui.QIcon()
#         icon7.addPixmap(QtGui.QPixmap(resource_path("icons/left/validate.png")), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
#         self.leftname_button_validate.setIcon(icon7)
#         self.leftname_button_validate.setIconSize(QtCore.QSize(30, 30))
#         self.leftname_button_validate.setCheckable(True)
#         self.leftname_button_validate.setAutoExclusive(True)
#         self.leftname_button_validate.setObjectName("leftname_button_validate")
#         self.verticalLayout_3.addWidget(self.leftname_button_validate, 0, QtCore.Qt.AlignmentFlag.AlignLeft)
#         self.gridLayout_3.addWidget(self.leftname_frame_validate, 5, 0, 1, 1, QtCore.Qt.AlignmentFlag.AlignLeft)
        spacerItem8 = QtWidgets.QSpacerItem(162, 16, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.gridLayout_3.addItem(spacerItem8, 8, 0, 1, 1)
        spacerItem9 = QtWidgets.QSpacerItem(162, 28, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.gridLayout_3.addItem(spacerItem9, 0, 0, 1, 1)
        spacerItem10 = QtWidgets.QSpacerItem(162, 16, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.gridLayout_3.addItem(spacerItem10, 2, 0, 1, 1)
        #spacerItem11 = QtWidgets.QSpacerItem(162, 16, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        #self.gridLayout_3.addItem(spacerItem11, 6, 0, 1, 1)
        self.leftname_frame_db = QtWidgets.QFrame(parent=self.leftname_frame)
        self.leftname_frame_db.setStyleSheet("\n"
"\n"
"QFrame{\n"
"    \n"
"    background-color: rgb(255, 255, 255);\n"
"                \n"
"    color: rgb(255, 255, 255);\n"
"border-radius:0px;\n"
"            }\n"
"            \n"
"            QFrame:hover {\n"
"              \n"
"\n"
"    background-color: rgb(0, 8, 129);\n"
"border-radius:10px;\n"
"\n"
"               cursor: pointer;\n"
"            }\n"
"\n"
"\n"
"            QFrame:focus {\n"
"              \n"
"\n"
"    background-color: rgb(0, 8, 129);\n"
"border-radius:10px;\n"
"\n"
"               cursor: pointer;\n"
"            }\n"
"\n"
"\n"
"")
        self.leftname_frame_db.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.leftname_frame_db.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.leftname_frame_db.setObjectName("leftname_frame_db")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.leftname_frame_db)
        self.verticalLayout.setContentsMargins(25, -1, 20, -1)
        self.verticalLayout.setObjectName("verticalLayout")
        self.leftname_button_db = QtWidgets.QPushButton(parent=self.leftname_frame_db)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.leftname_button_db.sizePolicy().hasHeightForWidth())
        self.leftname_button_db.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.leftname_button_db.setFont(font)
        self.leftname_button_db.setStyleSheet("QPushButton{\n"
"\n"
"                \n"
"    background-color: rgb(255, 255, 255);\n"
"border-radius:5px;\n"
"            }\n"
"            \n"
"                \n"
"\n"
"\n"
"")
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(resource_path("icons/left/db.png")), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.leftname_button_db.setIcon(icon8)
        self.leftname_button_db.setIconSize(QtCore.QSize(30, 30))
        self.leftname_button_db.setCheckable(True)
        self.leftname_button_db.setAutoExclusive(True)
        self.leftname_button_db.setObjectName("leftname_button_db")
        self.verticalLayout.addWidget(self.leftname_button_db, 0, QtCore.Qt.AlignmentFlag.AlignLeft)
        self.gridLayout_3.addWidget(self.leftname_frame_db, 7, 0, 1, 1, QtCore.Qt.AlignmentFlag.AlignLeft)
        self.gridLayout_4.addWidget(self.leftname_frame, 1, 2, 1, 1)
        self.left_frame = QtWidgets.QFrame(parent=self.left_menu_frame)
        self.left_frame.setMinimumSize(QtCore.QSize(100, 320))
        self.left_frame.setMaximumSize(QtCore.QSize(100, 800))
        self.left_frame.setStyleSheet("QFrame#left_frame{\n"
"\n"
"background-color: rgb(255, 255, 255);\n"
"border-radius:20px;\n"
"}\n"
"\n"
"\n"
"")
        self.left_frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.left_frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.left_frame.setObjectName("left_frame")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.left_frame)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        spacerItem12 = QtWidgets.QSpacerItem(162, 30, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_2.addItem(spacerItem12)
        self.left_frame_rename = QtWidgets.QFrame(parent=self.left_frame)
        self.left_frame_rename.setStyleSheet("\n"
"\n"
"QFrame{\n"
"    \n"
"    background-color: rgb(255, 255, 255);\n"
"                \n"
"    color: rgb(255, 255, 255);\n"
"border-radius:0px;\n"
"            }\n"
"            \n"
"            QFrame:hover {\n"
"              \n"
"\n"
"    background-color: rgb(0, 8, 129);\n"
"border-radius:10px;\n"
"\n"
"               cursor: pointer;\n"
"            }\n"
"\n"
"\n"
"            QFrame:focus {\n"
"              \n"
"\n"
"    background-color: rgb(0, 8, 129);\n"
"border-radius:10px;\n"
"\n"
"               cursor: pointer;\n"
"            }\n"
"\n"
"\n"
"")
        self.left_frame_rename.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.left_frame_rename.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.left_frame_rename.setObjectName("left_frame_rename")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.left_frame_rename)
        self.gridLayout_5.setContentsMargins(15, -1, 15, -1)
        self.gridLayout_5.setVerticalSpacing(6)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.left_button_rename = QtWidgets.QPushButton(parent=self.left_frame_rename)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.left_button_rename.sizePolicy().hasHeightForWidth())
        self.left_button_rename.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.left_button_rename.setFont(font)
        self.left_button_rename.setStyleSheet("QPushButton{\n"
"\n"
"                \n"
"    background-color: rgb(255, 255, 255);\n"
"border-radius:10px;\n"
"            }\n"
"            \n"
"                \n"
"\n"
"\n"
"")
        self.left_button_rename.setText("")
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap(resource_path("icons/left/rename.png")), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.left_button_rename.setIcon(icon9)
        self.left_button_rename.setIconSize(QtCore.QSize(40, 40))
        self.left_button_rename.setCheckable(True)
        self.left_button_rename.setAutoExclusive(True)
        self.left_button_rename.setObjectName("left_button_rename")
        self.gridLayout_5.addWidget(self.left_button_rename, 0, 0, 1, 1)
        self.verticalLayout_2.addWidget(self.left_frame_rename)
        spacerItem13 = QtWidgets.QSpacerItem(162, 16, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_2.addItem(spacerItem13)
        self.left_frame_cmd = QtWidgets.QFrame(parent=self.left_frame)
        self.left_frame_cmd.setStyleSheet("\n"
"\n"
"QFrame{\n"
"    \n"
"    background-color: rgb(255, 255, 255);\n"
"                \n"
"    color: rgb(255, 255, 255);\n"
"border-radius:0px;\n"
"            }\n"
"            \n"
"            QFrame:hover {\n"
"              \n"
"\n"
"    background-color: rgb(0, 8, 129);\n"
"border-radius:10px;\n"
"\n"
"               cursor: pointer;\n"
"            }\n"
"\n"
"\n"
"            QFrame:focus {\n"
"              \n"
"\n"
"    background-color: rgb(0, 8, 129);\n"
"border-radius:10px;\n"
"\n"
"               cursor: pointer;\n"
"            }\n"
"\n"
"\n"
"")
        self.left_frame_cmd.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.left_frame_cmd.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.left_frame_cmd.setObjectName("left_frame_cmd")
        self.gridLayout_10 = QtWidgets.QGridLayout(self.left_frame_cmd)
        self.gridLayout_10.setContentsMargins(15, -1, 15, -1)
        self.gridLayout_10.setObjectName("gridLayout_10")
        self.left_button_cmd = QtWidgets.QPushButton(parent=self.left_frame_cmd)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.left_button_cmd.sizePolicy().hasHeightForWidth())
        self.left_button_cmd.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.left_button_cmd.setFont(font)
        self.left_button_cmd.setStyleSheet("QPushButton{\n"
"\n"
"                \n"
"    background-color: rgb(255, 255, 255);\n"
"border-radius:10px;\n"
"            }\n"
"            \n"
"                \n"
"\n"
"\n"
"")
        self.left_button_cmd.setText("")
        self.left_button_cmd.setIcon(icon6)
        self.left_button_cmd.setIconSize(QtCore.QSize(40, 40))
        self.left_button_cmd.setCheckable(True)
        self.left_button_cmd.setAutoExclusive(True)
        self.left_button_cmd.setObjectName("left_button_cmd")
        self.gridLayout_10.addWidget(self.left_button_cmd, 0, 0, 1, 1)
        self.verticalLayout_2.addWidget(self.left_frame_cmd)
        spacerItem14 = QtWidgets.QSpacerItem(162, 14, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_2.addItem(spacerItem14)
#         self.left_frame_validate = QtWidgets.QFrame(parent=self.left_frame)
#         self.left_frame_validate.setStyleSheet("\n"
# "\n"
# "QFrame{\n"
# "    \n"
# "    background-color: rgb(255, 255, 255);\n"
# "                \n"
# "    color: rgb(255, 255, 255);\n"
# "border-radius:0px;\n"
# "            }\n"
# "            \n"
# "            QFrame:hover {\n"
# "              \n"
# "\n"
# "    background-color: rgb(0, 8, 129);\n"
# "border-radius:10px;\n"
# "\n"
# "               cursor: pointer;\n"
# "            }\n"
# "\n"
# "\n"
# "            QFrame:focus {\n"
# "              \n"
# "\n"
# "    background-color: rgb(0, 8, 129);\n"
# "border-radius:10px;\n"
# "\n"
# "               cursor: pointer;\n"
# "            }\n"
# "\n"
# "\n"
# "")
#         self.left_frame_validate.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
#         self.left_frame_validate.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
#         self.left_frame_validate.setObjectName("left_frame_validate")
#         self.gridLayout_11 = QtWidgets.QGridLayout(self.left_frame_validate)
#         self.gridLayout_11.setContentsMargins(15, -1, 15, -1)
#         self.gridLayout_11.setObjectName("gridLayout_11")
#         self.left_button_validate = QtWidgets.QPushButton(parent=self.left_frame_validate)
#         sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
#         sizePolicy.setHorizontalStretch(0)
#         sizePolicy.setVerticalStretch(0)
#         sizePolicy.setHeightForWidth(self.left_button_validate.sizePolicy().hasHeightForWidth())
#         self.left_button_validate.setSizePolicy(sizePolicy)
#         font = QtGui.QFont()
#         font.setPointSize(13)
#         self.left_button_validate.setFont(font)
#         self.left_button_validate.setStyleSheet("QPushButton{\n"
# "\n"
# "                \n"
# "    background-color: rgb(255, 255, 255);\n"
# "border-radius:10px;\n"
# "            }\n"
# "            \n"
# "                \n"
# "\n"
# "\n"
# "")
#         self.left_button_validate.setText("")
#         self.left_button_validate.setIcon(icon7)
#         self.left_button_validate.setIconSize(QtCore.QSize(40, 40))
#         self.left_button_validate.setCheckable(True)
#         self.left_button_validate.setAutoExclusive(True)
#         self.left_button_validate.setObjectName("left_button_validate")
#         self.gridLayout_11.addWidget(self.left_button_validate, 0, 0, 1, 1)
#         self.verticalLayout_2.addWidget(self.left_frame_validate)
        # spacerItem15 = QtWidgets.QSpacerItem(162, 14, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        # self.verticalLayout_2.addItem(spacerItem15)
        self.left_frame_db = QtWidgets.QFrame(parent=self.left_frame)
        self.left_frame_db.setStyleSheet("\n"
"\n"
"QFrame{\n"
"    \n"
"    background-color: rgb(255, 255, 255);\n"
"                \n"
"    color: rgb(255, 255, 255);\n"
"border-radius:0px;\n"
"            }\n"
"            \n"
"            QFrame:hover {\n"
"              \n"
"\n"
"    background-color: rgb(0, 8, 129);\n"
"border-radius:10px;\n"
"\n"
"               cursor: pointer;\n"
"            }\n"
"\n"
"\n"
"            QFrame:focus {\n"
"              \n"
"\n"
"    background-color: rgb(0, 8, 129);\n"
"border-radius:10px;\n"
"\n"
"               cursor: pointer;\n"
"            }\n"
"\n"
"\n"
"")
        self.left_frame_db.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.left_frame_db.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.left_frame_db.setObjectName("left_frame_db")
        self.gridLayout_12 = QtWidgets.QGridLayout(self.left_frame_db)
        self.gridLayout_12.setContentsMargins(15, -1, 15, -1)
        self.gridLayout_12.setObjectName("gridLayout_12")
        self.left_button_db = QtWidgets.QPushButton(parent=self.left_frame_db)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.left_button_db.sizePolicy().hasHeightForWidth())
        self.left_button_db.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.left_button_db.setFont(font)
        self.left_button_db.setStyleSheet("QPushButton{\n"
"\n"
"                \n"
"    background-color: rgb(255, 255, 255);\n"
"border-radius:10px;\n"
"            }\n"
"            \n"
"                \n"
"\n"
"\n"
"")
        self.left_button_db.setText("")
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap(resource_path("icons/left/db.png")), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        icon10.addPixmap(QtGui.QPixmap(resource_path("icons/left/db.png")), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.On)
        self.left_button_db.setIcon(icon10)
        self.left_button_db.setIconSize(QtCore.QSize(40, 40))
        self.left_button_db.setCheckable(True)
        self.left_button_db.setAutoExclusive(True)
        self.left_button_db.setObjectName("left_button_db")
        self.gridLayout_12.addWidget(self.left_button_db, 0, 0, 1, 1)
        self.verticalLayout_2.addWidget(self.left_frame_db)
        spacerItem16 = QtWidgets.QSpacerItem(162, 16, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_2.addItem(spacerItem16)
        self.left_frame_merge = QtWidgets.QFrame(parent=self.left_frame)
        self.left_frame_merge.setStyleSheet("\n"
"\n"
"QFrame{\n"
"    \n"
"    background-color: rgb(255, 255, 255);\n"
"                \n"
"    color: rgb(255, 255, 255);\n"
"border-radius:0px;\n"
"            }\n"
"            \n"
"            QFrame:hover {\n"
"              \n"
"\n"
"    background-color: rgb(0, 8, 129);\n"
"border-radius:10px;\n"
"\n"
"               cursor: pointer;\n"
"            }\n"
"\n"
"\n"
"            QFrame:focus {\n"
"              \n"
"\n"
"    background-color: rgb(0, 8, 129);\n"
"border-radius:10px;\n"
"\n"
"               cursor: pointer;\n"
"            }\n"
"\n"
"\n"
"")
        self.left_frame_merge.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.left_frame_merge.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.left_frame_merge.setObjectName("left_frame_merge")
        self.gridLayout_13 = QtWidgets.QGridLayout(self.left_frame_merge)
        self.gridLayout_13.setContentsMargins(15, -1, 15, -1)
        self.gridLayout_13.setObjectName("gridLayout_13")
        self.left_button_merge = QtWidgets.QPushButton(parent=self.left_frame_merge)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.left_button_merge.sizePolicy().hasHeightForWidth())
        self.left_button_merge.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.left_button_merge.setFont(font)
        self.left_button_merge.setStyleSheet("QPushButton{\n"
"\n"
"                \n"
"    background-color: rgb(255, 255, 255);\n"
"border-radius:10px;\n"
"            }\n"
"            \n"
"                \n"
"\n"
"\n"
"")
        self.left_button_merge.setText("")
        self.left_button_merge.setIcon(icon4)
        self.left_button_merge.setIconSize(QtCore.QSize(40, 40))
        self.left_button_merge.setCheckable(True)
        self.left_button_merge.setAutoExclusive(True)
        self.left_button_merge.setObjectName("left_button_merge")
        self.gridLayout_13.addWidget(self.left_button_merge, 0, 0, 1, 1)
        self.verticalLayout_2.addWidget(self.left_frame_merge)
        spacerItem17 = QtWidgets.QSpacerItem(162, 30, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_2.addItem(spacerItem17)
        self.gridLayout_4.addWidget(self.left_frame, 1, 0, 1, 2)
        spacerItem18 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_4.addItem(spacerItem18, 2, 1, 1, 1)
        self.gridLayout_9.addWidget(self.left_menu_frame, 0, 0, 1, 1)
        self.gridLayout_14.addWidget(self.mainmenu, 0, 0, 1, 1)
        MainWindow.keyPressEvent = self.keyPressEvent
        MainWindow.mousePressEvent = self.mousePressEvent
        MainWindow.mouseReleaseEvent = self.mouseReleaseEvent
        MainWindow.mouseMoveEvent = self.mouseMoveEvent


        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(2)
        self.stacked_tool_rename.setCurrentIndex(1)
        self.topbar_button_toggle.toggled['bool'].connect(self.leftname_frame.setHidden) # type: ignore
        self.topbar_button_toggle.toggled['bool'].connect(self.left_frame.setVisible) # type: ignore
        self.topbar_window_button_close.clicked.connect(MainWindow.close) # type: ignore
        self.topbar_window_button_minimize.clicked.connect(MainWindow.showMinimized) # type: ignore
        #self.leftname_button_validate.clicked.connect(self.leftname_frame_validate.setFocus) # type: ignore
        self.leftname_button_rename.clicked.connect(self.leftname_frame_rename.setFocus) # type: ignore
        self.leftname_button_cmd.clicked.connect(self.leftname_frame_cmd.setFocus) # type: ignore
        self.leftname_button_db.clicked.connect(self.leftname_frame_db.setFocus) # type: ignore
        self.leftname_button_merge.clicked.connect(self.leftname_frame_merge.setFocus) # type: ignore
        self.left_button_rename.clicked.connect(self.left_frame_rename.setFocus) # type: ignore
        self.left_button_cmd.clicked.connect(self.left_frame_cmd.setFocus) # type: ignore
        #self.left_button_validate.clicked.connect(self.left_frame_validate.setFocus) # type: ignore
        self.left_button_db.clicked.connect(self.left_frame_db.setFocus) # type: ignore
        self.left_button_merge.clicked.connect(self.left_frame_merge.setFocus) # type: ignore
        #QtCore.QMetaObject.connectSlotsByName(MainWindow)

        ##default open
        self.left_frame_rename.setFocus()
        self.stackedWidget.setCurrentIndex(0)


    ##leftname button index    
        self.leftname_button_rename.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(0))
        self.leftname_button_cmd.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(1))
        #self.leftname_button_validate.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(2))
        self.leftname_button_db.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(2))
        self.leftname_button_merge.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(3))
    #remove
        #self.leftname_button_rename.clicked.connect(self.clear_all)
        self.stackedWidget.currentChanged.connect(self.clear_all)
        # self.leftname_button_cmd.clicked.connect(self.clear_all)
        # self.leftname_button_validate.clicked.connect(self.clear_all)
        # self.leftname_button_db.clicked.connect(self.clear_all)
        # self.leftname_button_merge.clicked.connect(self.clear_all)
        # self.left_button_rename.clicked.connect(self.clear_all)
        # self.left_button_cmd.clicked.connect(self.clear_all)
        # self.left_button_validate.clicked.connect(self.clear_all)
        # self.left_button_db.clicked.connect(self.clear_all)
        # self.left_button_merge.clicked.connect(self.clear_all)
    ##leftname button index    
        self.left_button_rename.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(0))
        self.left_button_cmd.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(1))
        #self.left_button_validate.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(2))
        self.left_button_db.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(2))
        self.left_button_merge.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(3))
    ##manual default height
        self.left_frame.setVisible(True)
        self.leftname_frame.setHidden(True)
        MainWindow.setFixedWidth(750)  
        MainWindow.setGeometry(550,250,0,0)  



        ###manual adjust and about
        self.topbar_button_toggle.toggled.connect(self.adjustWidth)
        self.button_bottom_window_info.clicked.connect(self.about)

    ## manual sheets_ok_button
        self.stacked_button_sheet_rename.clicked.connect(self.sheets_ok_button)
    ## manual cmd
        self.stacked_button_cmd_export.clicked.connect(self.cmd_export_button)
        self.stacked_button_cmd_input.clicked.connect(self.cmd_input_button)
        self.stacked_button_cmd_output.clicked.connect(self.cmd_output_button)
        #self.stacked_button_merge_merge.clicked.connect(self.validate_merge_ext)
        self.stacked_button_merge_merge.clicked.connect(self.merge_merge_button)
    ## manual files
        self.stacked_button_files_rename.clicked.connect(self.files_rename_button)
        self.stacked_button_files_input.clicked.connect(self.files_input_button)
        self.stacked_button_db_input.clicked.connect(self.db_input_button)
        self.stacked_button_db_export.clicked.connect(self.db_export_button)
        self.stacked_button_db_output.clicked.connect(self.db_output_button)    
        self.stacked_button_merge_output.clicked.connect(self.merge_output_button)
        

    def about(self):
        msg = QMessageBox(parent=MainWindow, text='For queries, contact: \n Aditya Choudhary \n Research Associate \n GRC BAU Baroda Hub')
        msg.setIcon(QMessageBox.Icon.Information)
        msg.setWindowTitle("About")
        msg.setWindowIcon(QtGui.QIcon(resource_path("icons/main logo.png")))

        msg.setStyleSheet("background-color: rgb(0, 0, 0);color: rgb(255, 255, 255);")
        #msg.setText("For queries, contact: \n Aditya Choudhary \n Research Associate \n GRC BAU Baroda Hub")
        msg.exec()
        print("about")

############################## delete before open #######################
    def add_run_delete(delete_code, delete_name,workbook):
        import random
        import win32com.client as win32    
        excel = win32.Dispatch("Excel.Application")
        vbcomponent = workbook.VBProject.VBComponents.Add(1) 
        code_module = vbcomponent.CodeModule
        code_module.AddFromString(delete_code)
        workbook.Save()
        print('def deleteeeeeeee')

        print('assssssssssssssssssssss')
        excel.Run(delete_name)
        



        print('remxcxvfd voved')


        workbook.Save()


    delete_name = f"Work_Open{random.randint(1,555)}" 
    print(delete_name)
    

    delete_code = rf'''
        Sub {delete_name}()


            'Trust Access To Visual Basics Project must be enabled.
            'From Excel: Tools | Macro | Security | Trusted Sources
            
            Dim x               As Integer
            Dim Proceed         As VbMsgBoxResult
            Dim Prompt          As String
            Dim Title           As String
                
            On Error Resume Next
                
            With ActiveWorkbook.VBProject
                For x = .VBComponents.Count To 1 Step -1
                    .VBComponents.Remove .VBComponents(x)
                Next x
                For x = .VBComponents.Count To 1 Step -1
                    .VBComponents(x).CodeModule.DeleteLines _
                    1, .VBComponents(x).CodeModule.CountOfLines
                Next x
            End With
            
            
            On Error GoTo 0
            
        End Sub'''                
    #add_run_delete(delete_code,  delete_name)
  
    
    ##manual adjust width
      
    def adjustWidth(self, checked):
                
        if checked:
                self.left_frame.setHidden(True)
                self.leftname_frame.setVisible(True)
                print(str(MainWindow.pos()))


                #manual x
                line = MainWindow.pos()
                line=str(line)
                start_index = line.index('(') + 1  
                end_index = line.index(',')  

                pos_x = line[start_index:end_index]  
                pos_x = int(pos_x)  -160
                print(pos_x) 


                #manual y
                line = MainWindow.pos()
                line=str(line)
                start_index = line.index(',') + 1  
                end_index = line.index(')')  

                pos_y = line[start_index:end_index] 
                pos_y = int(pos_y)
                print(pos_y)  

                
                MainWindow.setFixedWidth(910)
                MainWindow.setGeometry(pos_x,pos_y,0,0)
        else:
                self.left_frame.setVisible(True)
                self.leftname_frame.setHidden(True)
                print(MainWindow.pos())
                  
                #manual x
                line = MainWindow.pos()
                line=str(line)
                start_index = line.index('(') + 1  
                end_index = line.index(',')  

                pos_x = line[start_index:end_index]  
                pos_x = int(pos_x)+160
                print(pos_x)  


                #manual y
                line = MainWindow.pos()
                line=str(line)
                start_index = line.index(',') + 1  
                end_index = line.index(')')  

                pos_y = line[start_index:end_index] 
                pos_y = int(pos_y)  
                print(pos_y)  
                MainWindow.setFixedWidth(750)
                MainWindow.setGeometry(pos_x,pos_y,0,0)
 
    def clear_all(self):
        print("clear")
        self.stacked_lineedit_cmd_export.setText("")
        self.stacked_lineedit_db_export.setText("")
        self.stacked_lineedit_files_location.setText("")
        self.stacked_lineedit_merge_export.setText("")
        self.stacked_lineedit_merge_extension.setText("")
        self.stacked_lineedit_merge_location.setText("")
        self.stacked_lineedit_merge_name.setText("")
        self.stacked_lineedit_sheet_location.setText("")
        # self.stacked_lineedit_validate_threshold.setText("")
        # self.stacked_lineedit_validate_current.setText("")
        # self.stacked_lineedit_validate_previos.setText("")



                
################################################  MAIN CODES########################################
########################################
########################################
#########################################  cmd code   #############################################
    ######################################## button
    def cmd_export_button(self):
        import os 
        
        filename = self.stacked_lineedit_cmd_export.text()
        a=(os.path.exists(filename))  
        
        print(filename)
        if filename=="":
            msg = QMessageBox(parent=MainWindow,text="Please enter file path")
            msg.setIcon(QMessageBox.Icon.Information)
            msg.setWindowTitle("Empty Field")
            msg.setStyleSheet("background-color: rgb(0, 0, 0);color: rgb(255, 255, 255);")
            msg.exec()
        elif a == False:
                msg = QMessageBox(parent=MainWindow,text="Please Enter Correct Path")
                msg.setIcon(QMessageBox.Icon.Information)
                msg.setWindowTitle("Invalid Field")
                msg.setStyleSheet("background-color: rgb(0, 0, 0);color: rgb(255, 255, 255);")
                msg.exec()
                return   


        else:
            
            filename = f"\" {filename}\""    
            def add_run_delete_macro_cmd(module_code, workbook_path, macro_name):
                import win32com.client as win32    
                excel = win32.Dispatch("Excel.Application")
                excel.Visible = False  # To make Excel visible during the process
                print('try')

                try:
                    workbook = excel.Workbooks.Open(workbook_path)
                    Ui_MainWindow.add_run_delete(Ui_MainWindow.delete_code, Ui_MainWindow.delete_name,workbook)
                    print("add_run_delete")

                except:
                    msg = QMessageBox(parent=MainWindow,text="Please enter correct path")
                    msg.setIcon(QMessageBox.Icon.Information)
                    msg.setWindowTitle("Invalid Field")
                    msg.setStyleSheet("background-color: rgb(0, 0, 0);color: rgb(255, 255, 255);")
                    msg.exec()
                    return
   
                vbcomponent = workbook.VBProject.VBComponents.Add(1) 
                code_module = vbcomponent.CodeModule
                code_module.AddFromString(module_code)
                workbook.Save()
                print('saved')

                print('macro_name')
                excel.Run(macro_name)
                


                workbook.VBProject.VBComponents.Remove(vbcomponent)
                print('removed')


                workbook.Save()
                print('daved2')

                workbook.Close()
                print('modddddddddddddd')
                excel.Quit()

            module_code = rf'''

            Dim docs As String
            Dim WshShell As Object

            Function mydocs() As String
                Set WshShell = CreateObject("WScript.Shell")
                mydocs = WshShell.SpecialFolders("MyDocuments")
            End Function


            Sub cmd()

                Dim iCntr



                'SHEETS
                Dim ws_inp As Worksheet
                Dim ws_inv As Worksheet
                Dim ws_main As Worksheet

                'WORKBOOK
                Dim wb As Workbook

                Dim reports As Long

                Dim j As Double
                Dim k As Double
                Dim i As Double

                Dim code_1 As String
                Dim code_2 As String
                Dim code_3 As String
                Dim code_4 As String
                Dim code_5 As String
                Dim code_6 As String
                Dim code_7 As String

                Dim docs As String

                Dim fol_CF As String
                Dim fol_wsp As String
                Dim fol_log As String

                Dim strFile_Path_1 As String
                Dim strFile_Path As String

                Set wb = ThisWorkbook
                Set ws_inp = wb.Sheets("INPUT")
            

                Dim name_wsp As String
                Dim fileExt As String

                Dim Resp As VbMsgBoxResult



                docs = mydocs



                fol_wsp = ws_inp.Range("A2")
                Debug.Print fol_wsp

                    fileExt = InStrRev(fol_wsp, "\")
    
    
                    name_wsp = InStr(fileExt + 1, fol_wsp, ".")
    
                    name_wsp = Mid(fol_wsp, fileExt + 1, name_wsp - fileExt - 1)
 
                Debug.Print name_wsp
                
                
                strFile_Path_1 = {filename}
                strFile_Path_1=Trim(Replace(strFile_Path_1, "/", "\"))
                strFile_Path = strFile_Path_1 & "\" & name_wsp & " " & "Script.cmd" 
                strFile_Path=Trim(Replace(strFile_Path, "/", "\"))
                fol_log = strFile_Path_1
                    Open strFile_Path For Output As #1




                    code_2 = _
                    "Set DirWSP=" & fol_wsp & vbNewLine & _
                    "Set DirLog=" & fol_log & vbNewLine & _
                    "if exist """"%ProgramFiles%\nielsen\Answers\builder.exe"""" goto win32" & vbNewLine & _
                    "Set DirAD=%ProgramFiles(x86)%\nielsen\Answers" & vbNewLine & _
                    "GoTo Common" & vbNewLine & _
                    ": Win32" & vbNewLine & _
                    "Set DirAD=%ProgramFiles%\nielsen\Answers" & vbNewLine & _
                    ": Common"

                    

                Print #1, code_2

                    Debug.Print code_2
                    For j = 4 To ws_inp.Cells(23, 3).End(xlUp).Row
                        code_3 = """" & "%DirAD%\builder.exe" & """ " & """" & "%DirWSP%\" & """" & " -l " & """" & _
                        "%DirLog%\" & ws_inp.Cells(j, 3) & ".log" & """" & " -s " & """" & ws_inp.Cells(j, 3) & """" & " -c"
                    
                        Print #1, code_3
                        Debug.Print code_3
                    Next
                        

                    
                    
                Print #1,
                code_5 = " echo _______________________TASK COMPLETED_____________________________________________________" & vbNewLine & _
                "Pause"
                Print #1, code_5
                Debug.Print code_5

                    Close #1

                Resp = MsgBox("Script is ready. Do you want to view it?", vbInformation + vbYesNo, "Report ready")


                    If Resp = vbYes Then
                        ThisWorkbook.FollowHyperlink strFile_Path_1
                    End If



            End Sub





            '''
            filename= resource_path("files_xl/cmd.xlsm")
            #C:\Users\chad2001\Desktop\VBS\Python\APPLICATION\VSCODE\files_xl\cmd.xlsm
            export_path = filename
            macro_name = "cmd"

            add_run_delete_macro_cmd(module_code, export_path, macro_name)

    ################################ input code ##############################################
    def cmd_input_button(self):
        import random
        import os
        workbook_path= resource_path("files_xl/cmd.xlsm")

        import win32com.client as win32
        excel = win32.Dispatch("Excel.Application")
        print("sddddddddddddddddddddddddddddddddddd")
        workbook = excel.Workbooks.Open(workbook_path)
        excel.Visible = True
        Ui_MainWindow.add_run_delete(Ui_MainWindow.delete_code, Ui_MainWindow.delete_name,workbook)
        

    ################################ output    cmd
    def cmd_output_button(self):
        import os
        filename = self.stacked_lineedit_cmd_export.text()
        a=(os.path.exists(filename)) 
        if filename=="":
            msg = QMessageBox(parent=MainWindow,text="Please enter file path")
            msg.setIcon(QMessageBox.Icon.Information)
            msg.setWindowTitle("Empty Field")
            msg.setStyleSheet("background-color: rgb(0, 0, 0);color: rgb(255, 255, 255);")
            msg.exec()
        elif a == False:
                msg = QMessageBox(parent=MainWindow,text="Please Enter Correct Path")
                msg.setIcon(QMessageBox.Icon.Information)
                msg.setWindowTitle("Invalid Field")
                msg.setStyleSheet("background-color: rgb(0, 0, 0);color: rgb(255, 255, 255);")
                msg.exec()
                return 

        else:
        
            print("exc")
            os.startfile(filename)
 


############################################   rename sheets code ####################################        
    def sheets_ok_button(self):
        import os
        filename = self.stacked_lineedit_sheet_location.text()
        #print(filename)
        a=(os.path.exists(filename))
        if filename=="":
            
            msg = QMessageBox(parent=MainWindow,text="Please enter file path")
            msg.setIcon(QMessageBox.Icon.Information)
            msg.setWindowTitle("Empty Field")
            msg.setStyleSheet("background-color: rgb(0, 0, 0);color: rgb(255, 255, 255);")
            msg.exec()

            print("o")
        elif a == False:
                msg = QMessageBox(parent=MainWindow,text="Please Enter Correct Path")
                msg.setIcon(QMessageBox.Icon.Information)
                msg.setWindowTitle("Invalid Field")
                msg.setStyleSheet("background-color: rgb(0, 0, 0);color: rgb(255, 255, 255);")
                msg.exec()
                return  

        else:    
 
            if self.stacked_checkbox_sheet_toc.isChecked():
                
                import win32com.client as win32

                def add_run_delete_macro_yes(module_code, workbook_path, macro_name):
                    
                    excel = win32.Dispatch("Excel.Application")
                    
            
                        
                    excel.Visible = False  # To make Excel visible during the process
                    print('try')

                    try:
                        print('try1')
                        workbook = excel.Workbooks.Open(workbook_path)
                        Ui_MainWindow.add_run_delete(Ui_MainWindow.delete_code, Ui_MainWindow.delete_name,workbook)
                    except:
                        msg = QMessageBox(parent=MainWindow,text="Please enter correct path")
                        msg.setIcon(QMessageBox.Icon.Information)
                        msg.setWindowTitle("Invalid Path")
                        msg.setStyleSheet("background-color: rgb(0, 0, 0);color: rgb(255, 255, 255);")
                        msg.exec()
                        print("ooooo")
                        return

                    vbcomponent = workbook.VBProject.VBComponents.Add(1)  

                    code_module = vbcomponent.CodeModule
                    code_module.AddFromString(module_code)
                    workbook.Save()
                    print('saved')
                    print('macro_name')
                    excel.Run(macro_name)
                    print('runed')

                    workbook.VBProject.VBComponents.Remove(vbcomponent)
                    print('removed')

                    workbook.Save()
                    print('daved2')

                    workbook.Close()
                    print('modddddddddddddd')
                    excel.Quit()
                        
                    
                        
                    self.stacked_lineedit_sheet_location.clear()
                    msg = QMessageBox(parent=MainWindow,text="Sheets Renamed!")
                    msg.setIcon(QMessageBox.Icon.NoIcon)
                    msg.setWindowTitle("Task Completed")
                    msg.setStyleSheet("background-color: rgb(0, 0, 0);color: rgb(255, 255, 255);")
                    msg.exec()


            
                module_code = '''
                Sub RenameSheets_yes()
                    Dim filename As String
                    Dim wb As Workbook
                    Dim ws As Worksheet
                    Dim i As Integer

                    Set wb = ThisWorkbook

                                If wb.Sheets(1).Name <> "WSP_TOCX" Then
                                    wb.Sheets(1).Name = "WSP_TOCX"
                                    
                                If wb.Sheets(1).Name <> "WSP_TOC" Then  
                                wb.Sheets(1).Name = "WSP_TOC"
                                End If
                                End If

                            For i = 2 To wb.Sheets.Count
                                If wb.Sheets(i).Name <> "SheetX_" & i - 1 Then
                                    wb.Sheets(i).Name = "SheetX_" & i - 1
                                End If
                            Next i

                            For i = 2 To wb.Sheets.Count
                                If wb.Sheets(i).Name <> "WSP_Sheet" & i - 1 Then
                                    wb.Sheets(i).Name = "WSP_Sheet" & i - 1
                                End If
                            Next i

                End Sub


                '''

                workbook_path = filename
                macro_name = "RenameSheets_yes"
                print('oop')

                add_run_delete_macro_yes(module_code, workbook_path, macro_name)
    ############
            else:    
            
          
                print("else")
                import win32com.client as win32

                def add_run_delete_macro(module_code, workbook_path, macro_name):

                    try:
                        print("ddddd")
                        excel = win32.Dispatch("Excel.Application")
                        excel.Visible = False  
                        workbook = excel.Workbooks.Open(workbook_path)
                        print("d")
                        #traceback.print_exc() 
                    except :
                        print("dd")
                        #traceback.print_exc() 
                        msg = QMessageBox(parent=MainWindow,text="Please enter correct path")
                        msg.setIcon(QMessageBox.Icon.Information)
                        msg.setWindowTitle("Empty Field")
                        msg.setStyleSheet("background-color: rgb(0, 0, 0);color: rgb(255, 255, 255);")
                        msg.exec()
                        print("dd")
                        return


                    vbcomponent = workbook.VBProject.VBComponents.Add(1)  

                    code_module = vbcomponent.CodeModule
                    code_module.AddFromString(module_code)
                    workbook.Save()
                    excel.Run(macro_name)

                    workbook.VBProject.VBComponents.Remove(vbcomponent)


                    workbook.Save()
                    print('daved2')

                    workbook.Close()
                    print('modddddddddddddd')
                    excel.Quit()
                        
                    
                        
                    self.stacked_lineedit_sheet_location.clear()
                    msg = QMessageBox(parent=MainWindow,text="Sheets Renamed!")
                    msg.setIcon(QMessageBox.Icon.NoIcon)
                    msg.setWindowTitle("Task Completed")
                    msg.setStyleSheet("background-color: rgb(0, 0, 0);color: rgb(255, 255, 255);")
                    msg.exec()
   
                module_code = '''
                Sub RenameSheets()
                    Dim filename As String
                    Dim wb As Workbook
                    Dim ws As Worksheet
                    Dim i As Integer

                    Set wb = ThisWorkbook

                            For i = 2 To wb.Sheets.Count
                                If wb.Sheets(1).Name = "WSP_Sheet" & i - 1 Then
                                    Debug.Print wb.Sheets(1).Name
                                    Debug.Print wb.Sheets(i).Name
                                    wb.Sheets(1).Name = wb.Sheets(1).Name & "_"
                                End If
                            Next i

                            For i = 2 To wb.Sheets.Count
                                If wb.Sheets(i).Name <> "SheetX_" & i - 1 Then
                                    wb.Sheets(i).Name = "SheetX_" & i - 1
                                End If
                            Next i

                            For i = 2 To wb.Sheets.Count
                                If wb.Sheets(i).Name <> "WSP_Sheet" & i - 1 Then
                                    wb.Sheets(i).Name = "WSP_Sheet" & i - 1
                                End If
                            Next i




                End Sub


                '''

                workbook_path = filename
                macro_name = "RenameSheets"

                add_run_delete_macro(module_code, workbook_path, macro_name)


############################################   merge code ####################################        
    def merge_merge_button(self):
        import os        
        
        folder_loc =self.stacked_lineedit_merge_location.text()
        export_loc =self.stacked_lineedit_merge_export.text()
        export_name = self.stacked_lineedit_merge_name.text()
        exten = self.stacked_lineedit_merge_extension.text()
        a=(os.path.exists(folder_loc))
        b=(os.path.exists(export_loc))
        print(exten)

        
  
        print("validation")
        if (not exten.startswith('.')) and exten != "" :
            mg = QMessageBox(parent=MainWindow, text='Extension should start with a dot (".")')
            mg.setIcon(QMessageBox.Icon.Warning)
            mg.setWindowTitle("Error")
            mg.setStyleSheet("background-color: rgb(0, 0, 0);color: rgb(255, 255, 255);")
            mg.exec()

        else:


            print(folder_loc)
            import os
            if folder_loc=="" or export_loc=="" or export_name=="" :
                msg = QMessageBox(parent=MainWindow,text="Please enter field.")
                msg.setIcon(QMessageBox.Icon.Information)
                msg.setWindowTitle("Empty Field")
                msg.setStyleSheet("background-color: rgb(0, 0, 0);color: rgb(255, 255, 255);")
                msg.exec()
            elif a == False:
                msg = QMessageBox(parent=MainWindow,text="Please Enter Correct Location")
                msg.setIcon(QMessageBox.Icon.Information)
                msg.setWindowTitle("Invalid Field")
                msg.setStyleSheet("background-color: rgb(0, 0, 0);color: rgb(255, 255, 255);")
                msg.exec()
                return      
            elif b == False:
                msg = QMessageBox(parent=MainWindow,text="Please Enter Correct Export Location")
                msg.setIcon(QMessageBox.Icon.Information)
                msg.setWindowTitle("Invalid Field")
                msg.setStyleSheet("background-color: rgb(0, 0, 0);color: rgb(255, 255, 255);")
                msg.exec()
                return          
            else:
                folder_loc = f"\" {folder_loc}\""
                export_loc = f"\" {export_loc}\""  
                export_name = f"\" {export_name}\""  
                exten = f"\" {exten}\""  

                def add_run_delete_macro_cmd(module_code, workbook_path, macro_name):
                    import win32com.client as win32    
                    excel = win32.Dispatch("Excel.Application")
                    excel.Visible = False  # To make Excel visible during the process
                    print('try')

                    try:
                        workbook = excel.Workbooks.Open(workbook_path)
                        Ui_MainWindow.add_run_delete(Ui_MainWindow.delete_code, Ui_MainWindow.delete_name,workbook)
                        print("add_run_delete")

                    except:
                        msg = QMessageBox()
                        msg.setIcon(QMessageBox.Icon.Information)
                        msg.setWindowTitle("Error")
                        msg.setText("Contact Creater")
                        msg.exec()
    
                    vbcomponent = workbook.VBProject.VBComponents.Add(1) 
                    code_module = vbcomponent.CodeModule
                    code_module.AddFromString(module_code)
                    workbook.Save()
                    print('saved')

                    print('macro_name')
                    excel.Run(macro_name)
                    


                    workbook.VBProject.VBComponents.Remove(vbcomponent)
                    print('removed')


                    workbook.Save()
                    print('daved2')

                    workbook.Close()
                    print('modddddddddddddd')
                    excel.Quit()

                module_code = rf'''

                Sub mergefiles()

                        Dim fileName As String
                        Dim exportname As String
                        Dim exportloc As String
                        Dim extensio As String
                        Dim wb As Workbook
                        Dim ws As Worksheet
                        Dim mergedWs As Worksheet
                        Dim totalSheets As Integer
                        Dim sheetCount As Integer
                        Dim FldrPicker As FileDialog
                        Dim folderPath As String
                        Dim mergedWorkbook As Workbook
                        Dim i As Integer
                    Dim randomNumber As String
                    Dim check As String
                    Dim deletedCount As Integer
                    
                    check = True                
                    folderpath = {folder_loc}
                        folderpath=Trim(Replace(folderpath, "/", "\"))

                    exportloc = {export_loc}
                        exportloc=Trim(Replace(exportloc, "/", "\"))

                    exportname ={export_name}
                        exportname=Trim(Replace(exportname, "/", "\"))

                    extensio ={exten}
                        extensio=Trim(Replace(extensio, "/", "\"))

                        Set mergedWorkbook = Workbooks.Add
                        Set mergedWs = mergedWorkbook.Worksheets(1)
                        
                        
                        fileName = Dir(folderPath & "\")
                        Do While fileName <> ""
                        
                            Set wb = Workbooks.Open(folderPath & "\" & fileName)
                            check = False
                    
                            totalSheets = wb.Sheets.Count
                            
                              Application.ScreenUpdating = False
                            Application.DisplayAlerts = False  
                            For sheetCount = totalSheets To 1 Step -1
                                Set ws = wb.Sheets(sheetCount)
                                
                                
                                If ws.Name = "WSP_TOC" Then
                                ws.Delete
                                totalSheets = totalSheets - 1
                                deletedCount = deletedCount + 1
                                Else
                                randomNumber = Right(Str(Rnd()), 4)
                                ws.Name = "ws" & randomNumber & (sheetCount - deletedCount)
                                
                                End If
                            Next sheetCount
                            

                            wb.Sheets.Copy Before:=mergedWs
                            wb.Close SaveChanges:=False
                            fileName = Dir
                        Loop
                        

                         
                        
                        mergedWs.Delete
                        Application.ScreenUpdating = True
                        Application.DisplayAlerts = True

                        i = 1
                        
                        For Each ws In mergedWorkbook.Sheets

                            ws.Name = "WSP_Sheet" & i
                            i = i + 1
                            
                        Next ws
                        

                        Dim mergedFilePath As String

                        If extensio = "" Then
                            extensio = ".xlsx"
                        End If
                        mergedFilePath = exportloc & "\" & exportname  & extensio
                        If extensio= ".xlsb" Then
                             mergedWorkbook.SaveAs Filename:=mergedFilePath, FileFormat:=50
                        Else
                        
                        on error goto err1
                        mergedWorkbook.SaveAs mergedFilePath
                        End If
                        
                        mergedWorkbook.Close SaveChanges:=False
                        
                        
                        
                        
                        MsgBox "Sheets merged successfully!", vbInformation
                        Exit Sub
                        err1: MsgBox "Error, Contact Creater"
                        Exit Sub
                        

                    End Sub

                    '''
                filename= resource_path("files_xl/merge.xlsm")
                #C:\Users\chad2001\Desktop\VBS\Python\APPLICATION\VSCODE\files_xl\cmd.xlsm
                export_path = filename
                macro_name = "mergefiles"

                add_run_delete_macro_cmd(module_code, export_path, macro_name)

############################################   merge output ###################
    def merge_output_button(self):
        import os
        filename = self.stacked_lineedit_merge_export.text()
        a=(os.path.exists(filename))
        if filename=="":
            msg = QMessageBox(parent=MainWindow,text="Please enter file path")
            msg.setIcon(QMessageBox.Icon.Information)
            msg.setWindowTitle("Empty Field")
            msg.setStyleSheet("background-color: rgb(0, 0, 0);color: rgb(255, 255, 255);")
            msg.exec()
        elif a == False:
                msg = QMessageBox(parent=MainWindow,text="Please Enter Correct Path")
                msg.setIcon(QMessageBox.Icon.Information)
                msg.setWindowTitle("Invalid Field")
                msg.setStyleSheet("background-color: rgb(0, 0, 0);color: rgb(255, 255, 255);")
                msg.exec()
                return        

        else:
        
            print("exc")
            os.startfile(filename)

############################################   rename files code ####################################        
    def files_rename_button(self):
        import os 
        folder_loc =self.stacked_lineedit_files_location.text()
          
        #Ui_MainWindow.validate_merge_ext
        print(folder_loc)

        if folder_loc=="":
            msg = QMessageBox(parent=MainWindow,text="Please Enter Folder Path")
            msg.setIcon(QMessageBox.Icon.Information)
            msg.setWindowTitle("Empty Field")
            msg.setStyleSheet("background-color: rgb(0, 0, 0);color: rgb(255, 255, 255);")
            msg.exec()          
    
    
            
        else:
            try:
                os.startfile(folder_loc)

            except:
                msg = QMessageBox(parent=MainWindow,text="Please Enter Correct Path")
                msg.setIcon(QMessageBox.Icon.Information)
                msg.setWindowTitle("Invalid Field")
                msg.setStyleSheet("background-color: rgb(0, 0, 0);color: rgb(255, 255, 255);")
                msg.exec()
                return   

            import os
            folder_loc = f"\" {folder_loc}\"" 
            
            print(folder_loc)
            print("dddddddddkakaka")
            def add_run_delete_macro_rename(module_code, workbook_path, macro_name):
                import win32com.client as win32    
                excel = win32.Dispatch("Excel.Application")
                excel.Visible = False  # To make Excel visible during the process
                print('try')

                try:
                    workbook = excel.Workbooks.Open(workbook_path)
                    Ui_MainWindow.add_run_delete(Ui_MainWindow.delete_code, Ui_MainWindow.delete_name,workbook)
                    print("add_run_delete")

                except:
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Icon.Information)
                    msg.setWindowTitle("Error")
                    msg.setText("Contact Creater")
                    msg.exec()
                    return
   
                vbcomponent = workbook.VBProject.VBComponents.Add(1) 
                code_module = vbcomponent.CodeModule
                code_module.AddFromString(module_code)
                workbook.Save()
                print('saved')

                print('macro_name')
                try:
                   excel.Run(macro_name)
                except:
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Icon.Information)
                    msg.setWindowTitle("Error")
                    msg.setText("Contact Creater")
                    msg.exec()
                    return




                workbook.VBProject.VBComponents.Remove(vbcomponent)
                print('removed')


                workbook.Save()
                print('daved2')

                workbook.Close()
                print('modddddddddddddd')
                excel.Quit()

            module_code = rf'''

            Sub Rename()

                Dim newFolder As String
                Dim newFilePath As String
                Dim fileName As String
                Dim filepath As String
                Dim fileExtension As String
                Dim newName As String
                Dim targetFolder As String
                Dim fso As Object ' FileSystemObject
                Dim folderPath As String
                Dim folder As Object ' Folder
                Dim file As Object ' File
                Dim i As Double
                Dim mainws As Worksheet
                Dim dataws As Worksheet
                
                
                Dim index_ As Double
                Dim err As String

                Set file = Nothing
                Set folder = Nothing
                Set fso = Nothing
                
                
                folderPath = {folder_loc}
                folderpath=Trim(Replace(folderpath, "/", "\"))
                newFolder = folderPath & "\Backup"
                newFolder = Trim(newFolder)
                If Dir(newFolder, vbDirectory) = "" Then
                    MkDir newFolder
                Else
                    MsgBox "Remove the 'Backup' folder and try again.", vbExclamation
                    Exit Sub
                End If
                

                fileName = Dir(folderPath & "\*.*")
                fileName = Trim(fileName)
                
                
                
                Do While fileName <> ""
                    If Not (Left(fileName, 1) = ".") Then
                    On Error Goto here:
                    index_ = WorksheetFunction.Match(fileName, ThisWorkbook.Sheets(1).Range("B2:B620"), 0) + 1
                    If ThisWorkbook.Sheets(1).Cells(index_, 3) <> "" Then
                    newName = ThisWorkbook.Sheets(1).Cells(index_, 3) & ThisWorkbook.Sheets(1).Cells(index_, 4)
                        newFilePath = folderPath & "\" & newName
                        filepath = folderPath & "\" & fileName
                        
                        FileCopy filepath, newFolder & "\" & fileName
                        
                            'If Dir(newFilePath)<>"" Then
                             '   MsgBox "File already exists. Skipped."
                            'Else
                            Name folderPath & "\" & fileName As newFilePath
                            'End If
                     Else
                     Debug.Print ("skipped")
                        End If
                    End If
                    fileName = Dir
                Loop
                here:
                MsgBox "File renaming completed!", vbInformation
                
            End Sub

                '''
            workbook_path= resource_path("files_xl/rename_files.xlsm")
            #C:\Users\chad2001\Desktop\VBS\Python\APPLICATION\VSCODE\files_xl\cmd.xlsm
            
            macro_name = "Rename"

            add_run_delete_macro_rename(module_code, workbook_path, macro_name)


#################################### rename files input code ##############################################
    def files_input_button(self):
        import os
        folder_loc =self.stacked_lineedit_files_location.text()
        a=(os.path.exists(folder_loc))      
        #Ui_MainWindow.validate_merge_ext
        print(folder_loc)

        if folder_loc=="":
            msg = QMessageBox(parent=MainWindow,text="Please Enter Folder Path")
            msg.setIcon(QMessageBox.Icon.Information)
            msg.setWindowTitle("Empty Field")
            msg.setStyleSheet("background-color: rgb(0, 0, 0);color: rgb(255, 255, 255);")
            msg.exec()
        elif a == False:
                msg = QMessageBox(parent=MainWindow,text="Please Enter Correct Path")
                msg.setIcon(QMessageBox.Icon.Information)
                msg.setWindowTitle("Invalid Field")
                msg.setStyleSheet("background-color: rgb(0, 0, 0);color: rgb(255, 255, 255);")
                msg.exec()
                return    

        else:
            folder_loc = f"\" {folder_loc}\"" 
            
            print(folder_loc)
            print("dddddddddkakaka")
            def add_run_delete_macro_rename(module_code, workbook_path, macro_name):
                import win32com.client as win32    
                excel = win32.Dispatch("Excel.Application")
                excel.Visible = True  # To make Excel visible during the process
                print('try')

                try:
                    workbook = excel.Workbooks.Open(workbook_path)
                    Ui_MainWindow.add_run_delete(Ui_MainWindow.delete_code, Ui_MainWindow.delete_name,workbook)
                    print("add_run_delete")

                except:
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Icon.Information)
                    msg.setWindowTitle("Error")
                    msg.setText("Contact Creater")
                    msg.exec()

                vbcomponent = workbook.VBProject.VBComponents.Add(1) 
                code_module = vbcomponent.CodeModule
                code_module.AddFromString(module_code)
                workbook.Save()
                print('saved')

                print('macro_name')
                excel.Run(macro_name)
                


                workbook.VBProject.VBComponents.Remove(vbcomponent)
                print('removed')


                workbook.Save()
                print('daved2')



            module_code = rf'''
            Sub getname()

                Dim fso As Object ' FileSystemObject
                Dim folderPath As String
                Dim folder As Object ' Folder
                Dim file As Object ' File
                Dim i As Double
                folderPath = {folder_loc}
                folderpath=Trim(Replace(folderpath, "/", "\"))
                Set fso = CreateObject("Scripting.FileSystemObject")
                Set folder = fso.GetFolder(folderPath)
                i = 2
                ThisWorkbook.Sheets(1).Range("B2:C800").ClearContents

                For Each file In folder.Files
                    Debug.Print file.Name
                    ThisWorkbook.Sheets(1).Cells(i, 2) = file.Name
                    i = i + 1
                Next file

                End Sub
                    '''
            
            workbook_path= resource_path("files_xl/rename_files.xlsm")
                #C:\Users\chad2001\Desktop\VBS\Python\APPLICATION\VSCODE\files_xl\cmd.xlsm
                
            macro_name = "getname"

            add_run_delete_macro_rename(module_code, workbook_path, macro_name)

############################################## db  input field (input code) ##################################################
    
    def db_input_button(self):
        import random
        workbook_path= resource_path("files_xl/db.xlsm")
        import win32com.client as win32
        excel = win32.Dispatch("Excel.Application")
        print("sddddddddddddddddddddddddddddddddddd")
        workbook = excel.Workbooks.Open(workbook_path)
        excel.Visible = True
        Ui_MainWindow.add_run_delete(Ui_MainWindow.delete_code, Ui_MainWindow.delete_name,workbook)
    
    ############################################## db  output folder (input code) ##############################################
    def db_output_button(self):
        import os
        filename = self.stacked_lineedit_db_export.text()
        a=(os.path.exists(filename))
        if filename=="":
            msg = QMessageBox(parent=MainWindow,text="Please enter file path")
            msg.setIcon(QMessageBox.Icon.Information)
            msg.setWindowTitle("Empty Field")
            msg.setStyleSheet("background-color: rgb(0, 0, 0);color: rgb(255, 255, 255);")
            msg.exec()
        elif a == False:
                msg = QMessageBox(parent=MainWindow,text="Please Enter Correct Path")
                msg.setIcon(QMessageBox.Icon.Information)
                msg.setWindowTitle("Invalid Field")
                msg.setStyleSheet("background-color: rgb(0, 0, 0);color: rgb(255, 255, 255);")
                msg.exec()
                return        

        else:
        
            print("exc")
            os.startfile(filename)
 


    ############################################## db  export button (input code) ##############################################
    def db_export_button(self):
        import os
        filename = self.stacked_lineedit_db_export.text()
        a=(os.path.exists(filename))
        
        
        print(filename)
        if filename=="":
            msg = QMessageBox(parent=MainWindow,text="Please enter file path")
            msg.setIcon(QMessageBox.Icon.Information)
            msg.setWindowTitle("Empty Field")
            msg.setStyleSheet("background-color: rgb(0, 0, 0);color: rgb(255, 255, 255);")
            msg.exec()

        elif a == False:
                msg = QMessageBox(parent=MainWindow,text="Please Enter Correct Path")
                msg.setIcon(QMessageBox.Icon.Information)
                msg.setWindowTitle("Invalid Field")
                msg.setStyleSheet("background-color: rgb(0, 0, 0);color: rgb(255, 255, 255);")
                msg.exec()
                return             


        else:
             
            
            filename = f"\" {filename}\""    
            def add_run_delete_macro_cmd(module_code, workbook_path, macro_name):
                import win32com.client as win32    
                excel = win32.Dispatch("Excel.Application")
                excel.Visible = False  # To make Excel visible during the process
                print('try')


                workbook = excel.Workbooks.Open(workbook_path)
                Ui_MainWindow.add_run_delete(Ui_MainWindow.delete_code, Ui_MainWindow.delete_name,workbook)
                print("add_run_delete")


   
                vbcomponent = workbook.VBProject.VBComponents.Add(1) 
                code_module = vbcomponent.CodeModule
                code_module.AddFromString(module_code)
                workbook.Save()
                print('saved')

                print('macro_name')
                excel.Run(macro_name)
                


                workbook.VBProject.VBComponents.Remove(vbcomponent)
                print('removed')


                workbook.Save()
                print('daved2')

                workbook.Close()
                print('modddddddddddddd')
                excel.Quit()
                msg = QMessageBox(parent=MainWindow,text="Dates retrieved from the DBs")
                msg.setIcon(QMessageBox.Icon.NoIcon)
                msg.setWindowTitle("Database extraction")
                msg.setStyleSheet("background-color: rgb(0, 0, 0);color: rgb(255, 255, 255);")
                msg.exec()
                return  


            module_code = rf'''

            
                Private Function GetAllFiles(ByVal strPath As String, _
                ByVal intRow As Integer, ByRef objFSO As Object) As Integer
                Dim objFolder As Object
                Dim objFile As Object
                Dim i As Integer
                i = intRow - lstrow + 1
                Set objFolder = objFSO.GetFolder(strPath)
                For Each objFile In objFolder.Files
                        'print file name
                        If InStr(objFile.Name, "hed") > 0 Or InStr(objFile.Name, "HED") > 0 Then
                        
                        Cells(i + lstrow - 1, 1) = objFile.Name
                        'print file path
                        Cells(i + lstrow - 1, 3) = objFile.Path
                        i = i + 1
                        End If
                Next objFile
                GetAllFiles = i + lstrow - 1
                End Function
                Sub db()
                'Sub to retrieve the periods for the databases listed on the ReportData sheet

                Dim sDb(5000) As String
                Dim sPath(5000) As String
                Dim sPer(5000) As String
                Dim sType(5000) As String
                Dim sDATETIME(5000) As String
                Dim iPath As Integer
                Dim bReq As Boolean
                Dim i as Double
                Dim sCurrDb As String
                Dim sCurrPath As String
                Dim sCurrPer As String
                Dim sCurrType As String
                Dim sCurrDatetime As String
                Dim FilePath As String
                Dim filename As String
                Dim x As Integer
                Dim y As Integer

                Sheets("Sheet1").Select
                Range("A1").Select
                'Range("A2:E5000").Select
                'Selection.Cells.ClearContents

                x = 1

                'Populate the array with all required databases (unique path approach)
                Do Until IsEmpty(ActiveCell.Offset(x, 0)) = True

                    sCurrDb = ActiveCell.Offset(x, 0).Value
                    sCurrPath = ActiveCell.Offset(x, 1).Value
                    sCurrType = ActiveCell.Offset(x, 3).Value
                    
                    bReq = True
                    
                    'Loop through existing array to see if path already present
                    If iPath > 0 Then
                    
                        For i = 0 To iPath - 1
                        
                            If sPath(i) = sCurrPath Then bReq = False
                            
                        Next i
                        
                    End If
                    
                    
                    'If not already present, add db & path to arrays
                    If bReq = True Then
                    
                        sPath(iPath) = sCurrPath
                        sDb(iPath) = sCurrDb
                        sType(iPath) = sCurrType
                        iPath = iPath + 1
                        
                    End If
                    
                    x = x + 1
                    
                Loop

                'Array now populated with all required paths - retrieve periods
                For y = 0 To iPath - 1
                    
                    sPer(y) = Periods_ScanDb(sPath(y), sType(y))
                    
                    If sPer(y) <> "ERROR" And sPer(y) <> "NULL" Then
                    
                        sDATETIME(y) = FileDateTime(sPath(y))
                        
                    End If
                        
                Next y

                'Populate the data table
                y = 1

                Do Until IsEmpty(ActiveCell.Offset(y, 0)) = True
                    
                    sCurrDb = ActiveCell.Offset(y, 0).Value
                    sCurrPath = ActiveCell.Offset(y, 1).Value
                    
                    sCurrPer = ""
                    sCurrDatetime = ""
                    
                    For i = 0 To iPath - 1
                    
                        If sPath(i) = sCurrPath Then
                            
                            sCurrPer = sPer(i)
                            sCurrDatetime = sDATETIME(i)
                        
                        End If
                        
                    Next i
                    
                    sCurrPer = LTrim(sCurrPer)
                    ActiveCell.Offset(y, 2).Value = "'" & sCurrPer
                    
                    If sCurrDatetime <> "" Then
                    
                        ActiveCell.Offset(y, 3).Value = "'" & DateTimeMod(sCurrDatetime)
                        
                        'ActiveCell.Offset(y, 5).Value = Day(sCurrDateTime) & "/" & Month(sCurrDateTime) & "/" & _
                        '    Year(sCurrDateTime) & " " & Hour(sCurrDateTime) & ":" & Minute(sCurrDateTime)
                    
                    Else
                    
                        ActiveCell.Offset(y, 3).Value = ""
                        
                    End If
                    
                    y = y + 1

                Loop
                Application.DisplayAlerts = False
                filename= trim({filename})
                FilePath = filename & "\" & "Extracted DB Dates_" & Format(Now, "dd_mm hh_mm")  
                ThisWorkbook.SaveAs  Filename:=FilePath  , FileFormat:=51
                Application.DisplayAlerts = True
                
                End Sub


                Function Periods_ScanDb(sPath As String, sType As String)

                Dim sDb As String

                'Return the db name from the path
                sDb = Mid(sPath, Len(sPath) - 10, 7)

                'Check the filepath
                If sType <> "NULL" And Dir(sPath) = "" Then

                    Periods_ScanDb = "ERROR"
                    Exit Function
                    
                End If

                'Call the relevant function

                    Periods_ScanDb = Scan_SCANTRACK(sPath)
                    



                'Periods_ScanDb = "NULL"

                End Function

                Function DateTimeMod(sCurrDatetime As String)
                'Taken
                Dim sDay, sMonth, sYear, sHour, sMinute As String
                Dim iWkDay As Integer
                Dim sOutput As String

                If sCurrDatetime = "" Then

                    DateTimeMod = ""
                    Exit Function
                    
                End If

                If (sCurrDatetime) <> " " Then
                    sDay = Day(sCurrDatetime)
                    sMonth = Month(sCurrDatetime)
                    sYear = Year(sCurrDatetime)
                    
                    sHour = Hour(sCurrDatetime)
                    sMinute = Minute(sCurrDatetime)
                    
                    If sDay < 10 Then sDay = "0" & sDay
                    
                    If sMonth < 10 Then sMonth = "0" & sMonth
                    
                    If sHour < 10 Then sHour = "0" & sHour
                    
                    If sMinute < 10 Then sMinute = "0" & sMinute
                    
                    
                    sOutput = sDay & "/" & sMonth & "/" & sYear & " " & sHour & ":" & sMinute
                    
                    DateTimeMod = sOutput
                Else
                    DateTimeMod = " "
                End If

                End Function

                'this function get value from notepad

                Function Scan_SCANTRACK(sPath As String)

                Dim iUnit As Integer
                Dim lLenOfFile As Long
                Dim sText As String * 11
                Dim i As Long
                Dim bDateFind As Boolean

                iUnit = FreeFile
                i = 11
                bDateFind = False

                On Error GoTo errhandle

                Open sPath For Binary Access Read As iUnit

                lLenOfFile = LOF(iUnit)

                Do Until lLenOfFile - i < 1 Or bDateFind = True

                    Seek #iUnit, lLenOfFile - i
                    Get #iUnit, , sText
                    
                    'Range("A22").Value = sText
                    If Left(sText, 2) = "WE " And Mid(sText, 6, 1) = "." And Mid(sText, 9, 1) = "." _
                    Then
                    
                        bDateFind = True
                        Scan_SCANTRACK = sText
                        
                '     ElseIf Left(sText, 3) = "W2516" And Mid(sText, 6, 1) = "/" And Mid(sText, 9, 1) = "/" _
                '       Then
                '
                '        bDateFind = True
                '        Scan_SCANTRACK = sText
                '        Range("A22").Value = sText
                        
                    ElseIf Left(sText, 3) = "W  " Or Mid(sText, 6, 1) = "/" Or Mid(sText, 9, 1) = "/" _
                    Then

                        bDateFind = True
                        Scan_SCANTRACK = sText
                        'Range("A22").Value = sText
                        
                    ElseIf Left(sText, 3) = "JAN" Then
                        bDateFind = True
                        Scan_SCANTRACK = sText
                        
                    ElseIf Left(sText, 3) = "FEB" Then
                        bDateFind = True
                        Scan_SCANTRACK = sText
                        
                    ElseIf Left(sText, 3) = "MAR" Then
                        bDateFind = True
                        Scan_SCANTRACK = sText
                        
                    ElseIf Left(sText, 3) = "APR" Then
                        bDateFind = True
                        Scan_SCANTRACK = sText
                        
                    ElseIf Left(sText, 3) = "MAY" Then
                        bDateFind = True
                        Scan_SCANTRACK = sText
                        
                    ElseIf Left(sText, 3) = "JUN" Then
                        bDateFind = True
                        Scan_SCANTRACK = sText
                        
                    ElseIf Left(sText, 3) = "JUL" Then
                        bDateFind = True
                        Scan_SCANTRACK = sText
                        
                    ElseIf Left(sText, 3) = "AUG" Then
                        bDateFind = True
                        Scan_SCANTRACK = sText
                        
                    ElseIf Left(sText, 3) = "SEP" Then
                        bDateFind = True
                        Scan_SCANTRACK = sText
                        
                    ElseIf Left(sText, 3) = "OCT" Then
                        bDateFind = True
                        Scan_SCANTRACK = sText
                                
                    ElseIf Left(sText, 3) = "NOV" Then
                        bDateFind = True
                        Scan_SCANTRACK = sText
                        
                    ElseIf Left(sText, 3) = "DEC" Then
                        bDateFind = True
                        Scan_SCANTRACK = sText
                    
                    
                    
                    
                    'small
                        
                        
                    ElseIf Left(sText, 3) = "Jan" Then
                        bDateFind = True
                        Scan_SCANTRACK = sText
                        
                    ElseIf Left(sText, 3) = "Feb" Then
                        bDateFind = True
                        Scan_SCANTRACK = sText
                        
                    ElseIf Left(sText, 3) = "Mar" Then
                        bDateFind = True
                        Scan_SCANTRACK = sText
                        
                    ElseIf Left(sText, 3) = "Apr" Then
                        bDateFind = True
                        Scan_SCANTRACK = sText
                        
                    ElseIf Left(sText, 3) = "May" Then
                        bDateFind = True
                        Scan_SCANTRACK = sText
                        
                    ElseIf Left(sText, 3) = "Jun" Then
                        bDateFind = True
                        Scan_SCANTRACK = sText
                        
                    ElseIf Left(sText, 3) = "Jul" Then
                        bDateFind = True
                        Scan_SCANTRACK = sText
                        
                    ElseIf Left(sText, 3) = "Aug" Then
                        bDateFind = True
                        Scan_SCANTRACK = sText
                        
                    ElseIf Left(sText, 3) = "Sep" Then
                        bDateFind = True
                        Scan_SCANTRACK = sText
                        
                    ElseIf Left(sText, 3) = "Oct" Then
                        bDateFind = True
                        Scan_SCANTRACK = sText
                                
                    ElseIf Left(sText, 3) = "Nov" Then
                        bDateFind = True
                        Scan_SCANTRACK = sText
                        
                    ElseIf Left(sText, 3) = "Dec" Then
                        bDateFind = True
                        Scan_SCANTRACK = sText
                        
                    End If
                    
                    
                    
                    i = i + 1
                    
                Loop

                'Check it's found a period
                If bDateFind = False Then Scan_SCANTRACK = "ERROR"

                Close iUnit
                Exit Function
                errhandle:
                Close iUnit
                Scan_SCANTRACK = sPath
                End Function






            '''
            filename= resource_path("files_xl/db.xlsm")
            #C:\Users\chad2001\Desktop\VBS\Python\APPLICATION\VSCODE\files_xl\cmd.xlsm
            export_path = filename
            macro_name = "db"

            add_run_delete_macro_cmd(module_code, export_path, macro_name)


##################################

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        
        MainWindow.setWindowTitle(_translate("MainWindow", "The UltiMate Tool"))
        MainWindow.setWindowFlags(QtCore.Qt.WindowType.FramelessWindowHint)
        MainWindow.setAttribute(QtCore.Qt.WidgetAttribute.WA_TranslucentBackground)
        self.topbar_label_ulti.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:24pt; font-weight:600;\">The UltiMate Tool</span></p></body></html>"))
        self.stacked_tool_rename.setToolTip(_translate("MainWindow", "<html><head/><body><p><br/></p></body></html>"))
        self.stacked_label_files_location.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-weight:600;\">Enter Folder Location:</span></p></body></html>"))
        self.stacked_lineedit_files_location.setPlaceholderText(_translate("MainWindow", r"   C:\Users\Username\Documents\ExampleFolder"))
        self.stacked_button_files_rename.setText(_translate("MainWindow", "Rename Files"))
        #self.stacked_lineedit_files_period.setPlaceholderText(_translate("MainWindow", "Enter Period:"))
        self.stacked_label_files_values.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:11pt;\">Enter Values:</span></p></body></html>"))
        self.stacked_button_files_input.setText(_translate("MainWindow", "Input Field"))
        #self.stacked_label_files_period.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:11pt;\">Enter Period:</span></p></body></html>"))
        #self.stacked_label_files_preview.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:11pt;\">Preview:</span></p></body></html>"))
        self.stacked_tool_rename.setItemText(self.stacked_tool_rename.indexOf(self.stacked_tool_rename_files), _translate("MainWindow", "Rename Files"))
        self.stacked_label_sheet_location.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:20pt; font-weight:600;\">Enter File Location:</span></p></body></html>"))
        self.stacked_checkbox_sheet_toc.setText(_translate("MainWindow", "Rename First Sheet as WSP_TOC?"))
        self.stacked_button_sheet_rename.setText(_translate("MainWindow", "Rename Sheets"))
        self.stacked_lineedit_sheet_location.setPlaceholderText(_translate("MainWindow", r"  C:\Users\Username\Documents\examplefile.xlsx"))
        self.stacked_tool_rename.setItemText(self.stacked_tool_rename.indexOf(self.stacked_tool_rename_sheet), _translate("MainWindow", "Rename Sheets"))
        self.stacked_label_rename.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:22pt;\">Rename</span></p></body></html>"))
        self.stacked_label_cmd_main.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:22pt;\">Generate CMD File  </span></p></body></html>"))
        self.stacked_lineedit_cmd_export.setPlaceholderText(_translate("MainWindow", r"   C:\Users\Username\Documents\ExampleFolder"))
        self.stacked_button_cmd_export.setText(_translate("MainWindow", "Export"))
        self.stacked_label_cmd_export.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:18pt; font-weight:500;\">Export CMD File to:</span></p></body></html>"))
        self.stacked_label_cmd_input.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:20pt;font-weight:600;\">Enter Values:</span></p></body></html>"))
        self.stacked_button_cmd_input.setText(_translate("MainWindow", "Input Field"))
        #self.stacked_label_cmd_preview.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:11pt;\">Preview:</span></p></body></html>"))
        self.stacked_button_cmd_output.setText(_translate("MainWindow", "Output Folder"))
        # self.stacked_label_validate_main.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:22pt;\">Validate Dump</span></p></body></html>"))
        # self.stacked_lineedit_validate_previos.setPlaceholderText(_translate("MainWindow", "   Enter File Location:"))
        # self.stacked_label_validate_previous.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:18pt; font-weight:600;\">Previous Production Report:</span></p></body></html>"))
        # self.stacked_label_validate_current.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:18pt; font-weight:600;\">Current Production Report:</span></p></body></html>"))
        # self.stacked_lineedit_validate_current.setPlaceholderText(_translate("MainWindow", "   Enter File Location:"))
        # self.stacked_label_validate_thresh.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:11pt;\">Validation Threshold % :</span></p></body></html>"))
        # #self.stacked_lineedit_validate_threshold.setInputMask(_translate("MainWindow", "99"))
        # ### threshold
        # self.stacked_lineedit_validate_threshold.setValidator(QIntValidator())
        # self.stacked_lineedit_validate_threshold.setMaxLength(2)
        # self.stacked_lineedit_validate_threshold.setPlaceholderText(_translate("MainWindow", "Enter %:"))
        # self.stacked_button_validate_report.setText(_translate("MainWindow", "View Report"))
        # self.stacked_button_validate_validate.setText(_translate("MainWindow", "Validate"))
        self.stacked_label_db_main.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:22pt;\">Check DB Date</span></p></body></html>"))
        self.stacked_button_db_output.setText(_translate("MainWindow", "Output Folder"))
        self.stacked_lineedit_db_export.setPlaceholderText(_translate("MainWindow", r"   C:\Users\Username\Documents\ExampleFolder"))
        self.stacked_button_db_export.setText(_translate("MainWindow", "Export"))
        self.stacked_label_db_export.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:20pt; font-weight:500;\">Export to:</span></p></body></html>"))
        self.stacked_button_db_input.setText(_translate("MainWindow", "Input Field"))
        self.stacked_label_db_input.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:20pt;font-weight:600\">Enter Values:</span></p></body></html>"))
        self.stacked_label_merge_main.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:22pt;\">Merge Excel Files </span></p></body></html>"))
        self.stacked_lineedit_merge_location.setPlaceholderText(_translate("MainWindow", r"  C:\Users\Username\Documents\ExampleFolder"))
        self.stacked_checkbox_merge_toc.setText(_translate("MainWindow", "Files contain WSP_TOC sheets?"))
        self.stacked_button_merge_merge.setText(_translate("MainWindow", "Merge"))
        self.stacked_label_merge_location.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:20pt; font-weight:600;\">Enter Folder Location:</span></p></body></html>"))
        self.stacked_label_merge_export.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:16pt; font-weight:400;\">Export to:</span></p></body></html>"))
        self.stacked_label_merge_extension.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt; font-weight:400;\">Export as:</span></p></body></html>"))
        self.stacked_label_merge_name.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt; font-weight:400;\">Export File as:</span></p></body></html>"))
        self.stacked_lineedit_merge_name.setPlaceholderText(_translate("MainWindow", "    Enter Name:"))
        self.stacked_lineedit_merge_extension.setPlaceholderText(_translate("MainWindow", "Default: .xlsx"))
        self.stacked_lineedit_merge_export.setPlaceholderText(_translate("MainWindow", r"   C:\Users\Username\Documents\ExampleFolder"))
        self.stacked_button_merge_output.setText(_translate("MainWindow", "Output Folder"))
        self.leftname_button_merge.setText(_translate("MainWindow", "Merge Excel Files    "))
        self.leftname_button_rename.setText(_translate("MainWindow", "Rename Sheets/Files"))
        self.leftname_button_cmd.setText(_translate("MainWindow", "Generate CMD File "))
        #self.leftname_button_validate.setText(_translate("MainWindow", "Validate Dump        "))
        self.leftname_button_db.setText(_translate("MainWindow", "Check DB Date        "))
        



        
        

    # def keyPressEvent(self, event: QtGui.QKeyEvent):
    #     print("11111111111")
    #     print(event.key())
    #     print(type(event.key()))
    #     if event.key() == 16777216:
    #         MainWindow.close()

    def mousePressEvent(self, event):
        print("11111111111")

        if event.button() == QtCore.Qt.MouseButton.LeftButton:
            MainWindow.drag_position = event.globalPosition().toPoint()
            event.accept()

    def mouseMoveEvent(self, event: QtGui.QMouseEvent):
        print("move")
        if MainWindow.drag_position is not None and event.buttons() & QtCore.Qt.MouseButton.LeftButton:
            delta = event.globalPosition().toPoint() - MainWindow.drag_position
            MainWindow.move(MainWindow.pos() + delta)
            MainWindow.drag_position = event.globalPosition().toPoint()
            event.accept()

    def mouseReleaseEvent(self, event: QtGui.QMouseEvent):
        print("rel")
        if event.button() == QtCore.Qt.MouseButton.LeftButton:
            MainWindow.drag_position = None
        


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
